// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'model.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:WorkItem.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// WorkItem TABLE
class TableWorkItem extends SqfEntityTableBase {
  TableWorkItem() {
    // declare properties of EntityTable
    tableName = 'WorkItem';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('createdTime', DbType.datetime),
      SqfEntityFieldBase('updatedTime', DbType.datetime),
      SqfEntityFieldBase('startTime', DbType.datetime),
      SqfEntityFieldBase('endTime', DbType.datetime),
      SqfEntityFieldRelationshipBase(
          TableProject.getInstance, DeleteRule.CASCADE,
          fieldName: 'ProjectId'),
      SqfEntityFieldBase('summary', DbType.text),
      SqfEntityFieldBase('details', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableWorkItem();
  }
}

// Project TABLE
class TableProject extends SqfEntityTableBase {
  TableProject() {
    // declare properties of EntityTable
    tableName = 'Project';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('createdTime', DbType.datetime),
      SqfEntityFieldBase('updatedTime', DbType.datetime),
      SqfEntityFieldRelationshipBase(
          TableApplication.getInstance, DeleteRule.CASCADE,
          fieldName: 'ApplicationId'),
      SqfEntityFieldBase('name', DbType.text),
      SqfEntityFieldBase('description', DbType.text),
      SqfEntityFieldBase('priority', DbType.integer),
      SqfEntityFieldRelationshipBase(
          TableStatusType.getInstance, DeleteRule.SET_NULL,
          fieldName: 'StatusTypeId'),
      SqfEntityFieldBase('startedTime', DbType.datetime),
      SqfEntityFieldBase('completedTime', DbType.datetime),
      SqfEntityFieldRelationshipBase(
          TableProjectType.getInstance, DeleteRule.SET_NULL,
          fieldName: 'ProjectTypeId'),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableProject();
  }
}

// Application TABLE
class TableApplication extends SqfEntityTableBase {
  TableApplication() {
    // declare properties of EntityTable
    tableName = 'Application';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('createdTime', DbType.datetime),
      SqfEntityFieldBase('updatedTime', DbType.datetime),
      SqfEntityFieldBase('name', DbType.text),
      SqfEntityFieldBase('description', DbType.text),
      SqfEntityFieldBase('version', DbType.text),
      SqfEntityFieldBase('workStartedDate', DbType.datetime),
      SqfEntityFieldBase('workEndedDate', DbType.datetime),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableApplication();
  }
}

// Filter TABLE
class TableFilter extends SqfEntityTableBase {
  TableFilter() {
    // declare properties of EntityTable
    tableName = 'Filter';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('createdTime', DbType.datetime),
      SqfEntityFieldBase('updatedTime', DbType.datetime),
      SqfEntityFieldBase('filterXML', DbType.text),
      SqfEntityFieldBase('isDefault', DbType.bool),
      SqfEntityFieldBase('name', DbType.text),
      SqfEntityFieldBase('description', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableFilter();
  }
}

// ProjectType TABLE
class TableProjectType extends SqfEntityTableBase {
  TableProjectType() {
    // declare properties of EntityTable
    tableName = 'ProjectType';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('createdTime', DbType.datetime),
      SqfEntityFieldBase('updatedTime', DbType.datetime),
      SqfEntityFieldBase('name', DbType.text),
      SqfEntityFieldBase('description', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableProjectType();
  }
}

// Setting TABLE
class TableSetting extends SqfEntityTableBase {
  TableSetting() {
    // declare properties of EntityTable
    tableName = 'Settings';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('createdTime', DbType.datetime),
      SqfEntityFieldBase('updatedTime', DbType.datetime),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableSetting();
  }
}

// StatusType TABLE
class TableStatusType extends SqfEntityTableBase {
  TableStatusType() {
    // declare properties of EntityTable
    tableName = 'StatusType';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('createdTime', DbType.datetime),
      SqfEntityFieldBase('updatedTime', DbType.datetime),
      SqfEntityFieldBase('name', DbType.text),
      SqfEntityFieldBase('description', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableStatusType();
  }
}
// END TABLES

// BEGIN DATABASE MODEL
class TimeManager extends SqfEntityModelProvider {
  TimeManager() {
    databaseName = myDBModel.databaseName;
    databaseTables = [
      TableWorkItem.getInstance,
      TableProject.getInstance,
      TableApplication.getInstance,
      TableFilter.getInstance,
      TableProjectType.getInstance,
      TableSetting.getInstance,
      TableStatusType.getInstance,
    ];

    bundledDatabasePath = myDBModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
  }
  Map<String, dynamic> getControllers() {
    final controllers = Map<String, dynamic>();

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region WorkItem
class WorkItem {
  WorkItem(
      {this.id,
      this.createdTime,
      this.updatedTime,
      this.startTime,
      this.endTime,
      this.ProjectId,
      this.summary,
      this.details,
      this.isDeleted}) {
    _setDefaultValues();
  }
  WorkItem.withFields(
      this.createdTime,
      this.updatedTime,
      this.startTime,
      this.endTime,
      this.ProjectId,
      this.summary,
      this.details,
      this.isDeleted) {
    _setDefaultValues();
  }
  WorkItem.withId(
      this.id,
      this.createdTime,
      this.updatedTime,
      this.startTime,
      this.endTime,
      this.ProjectId,
      this.summary,
      this.details,
      this.isDeleted) {
    _setDefaultValues();
  }
  WorkItem.fromMap(Map<String, dynamic> o) {
    id = o['id'] as int;
    createdTime = o['createdTime'] != null
        ? int.tryParse(o['createdTime'].toString()) != null
            ? DateTime.fromMillisecondsSinceEpoch(o['createdTime'] as int)
            : DateTime.tryParse(o['createdTime'].toString())
        : null;
    updatedTime = o['updatedTime'] != null
        ? int.tryParse(o['updatedTime'].toString()) != null
            ? DateTime.fromMillisecondsSinceEpoch(o['updatedTime'] as int)
            : DateTime.tryParse(o['updatedTime'].toString())
        : null;
    startTime = o['startTime'] != null
        ? int.tryParse(o['startTime'].toString()) != null
            ? DateTime.fromMillisecondsSinceEpoch(o['startTime'] as int)
            : DateTime.tryParse(o['startTime'].toString())
        : null;
    endTime = o['endTime'] != null
        ? int.tryParse(o['endTime'].toString()) != null
            ? DateTime.fromMillisecondsSinceEpoch(o['endTime'] as int)
            : DateTime.tryParse(o['endTime'].toString())
        : null;
    ProjectId = o['ProjectId'] as int;

    summary = o['summary'] as String;
    details = o['details'] as String;
    isDeleted = o['isDeleted'] != null ? o['isDeleted'] == 1 : null;
  }
  // FIELDS (WorkItem)
  int id;
  DateTime createdTime;
  DateTime updatedTime;
  DateTime startTime;
  DateTime endTime;
  int ProjectId;
  String summary;
  String details;
  bool isDeleted;

  BoolResult saveResult;
  // end FIELDS (WorkItem)

// RELATIONSHIPS (WorkItem)
  /// get Project By ProjectId
  Future<Project> getProject([VoidCallback project(Project o)]) async {
    final _obj = await Project().getById(ProjectId);
    if (project != null) {
      project(_obj);
    }
    return _obj;
  }
  // END RELATIONSHIPS (WorkItem)

  static const bool _softDeleteActivated = true;
  WorkItemManager __mnWorkItem;

  WorkItemManager get _mnWorkItem {
    return __mnWorkItem = __mnWorkItem ?? WorkItemManager();
  }

  // METHODS
  Map<String, dynamic> toMap({bool forQuery = false, bool forJson = false}) {
    final map = Map<String, dynamic>();
    if (id != null) {
      map['id'] = id;
    }
    if (createdTime != null) {
      map['createdTime'] = forJson
          ? createdTime.toUtc().toString()
          : forQuery ? createdTime.millisecondsSinceEpoch : createdTime;
    }

    if (updatedTime != null) {
      map['updatedTime'] = forJson
          ? updatedTime.toUtc().toString()
          : forQuery ? updatedTime.millisecondsSinceEpoch : updatedTime;
    }

    if (startTime != null) {
      map['startTime'] = forJson
          ? startTime.toUtc().toString()
          : forQuery ? startTime.millisecondsSinceEpoch : startTime;
    }

    if (endTime != null) {
      map['endTime'] = forJson
          ? endTime.toUtc().toString()
          : forQuery ? endTime.millisecondsSinceEpoch : endTime;
    }

    if (ProjectId != null) {
      map['ProjectId'] = ProjectId;
    }

    if (summary != null) {
      map['summary'] = summary;
    }

    if (details != null) {
      map['details'] = details;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChilds(
      [bool forQuery = false, bool forJson = false]) async {
    final map = Map<String, dynamic>();
    if (id != null) {
      map['id'] = id;
    }
    if (createdTime != null) {
      map['createdTime'] = forJson
          ? createdTime.toUtc().toString()
          : forQuery ? createdTime.millisecondsSinceEpoch : createdTime;
    }

    if (updatedTime != null) {
      map['updatedTime'] = forJson
          ? updatedTime.toUtc().toString()
          : forQuery ? updatedTime.millisecondsSinceEpoch : updatedTime;
    }

    if (startTime != null) {
      map['startTime'] = forJson
          ? startTime.toUtc().toString()
          : forQuery ? startTime.millisecondsSinceEpoch : startTime;
    }

    if (endTime != null) {
      map['endTime'] = forJson
          ? endTime.toUtc().toString()
          : forQuery ? endTime.millisecondsSinceEpoch : endTime;
    }

    if (ProjectId != null) {
      map['ProjectId'] = ProjectId;
    }

    if (summary != null) {
      map['summary'] = summary;
    }

    if (details != null) {
      map['details'] = details;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method always returns Json String
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method always returns Json String
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChilds(false, true));
  }

  List<dynamic> toArgs() {
    return [
      id,
      createdTime != null ? createdTime.millisecondsSinceEpoch : null,
      updatedTime != null ? updatedTime.millisecondsSinceEpoch : null,
      startTime != null ? startTime.millisecondsSinceEpoch : null,
      endTime != null ? endTime.millisecondsSinceEpoch : null,
      ProjectId,
      summary,
      details,
      isDeleted
    ];
  }

  static Future<List<WorkItem>> fromWebUrl(String url) async {
    try {
      final response = await http.get(url);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR WorkItem.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  static Future<List<WorkItem>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = List<WorkItem>();
    try {
      objList = list
          .map((workitem) => WorkItem.fromMap(workitem as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR WorkItem.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<WorkItem>> fromObjectList(Future<List<dynamic>> o) async {
    final data = await o;
    return await WorkItem.fromMapList(data);
  }

  static Future<List<WorkItem>> fromMapList(List<dynamic> data) async {
    final List<WorkItem> objList = List<WorkItem>();
    for (final Map map in data as List<Map>) {
      final obj = WorkItem.fromMap(map as Map<String, dynamic>);

      objList.add(obj);
    }
    return objList;
  }

  /// returns WorkItem by ID if exist, otherwise returns null
  /// <param name='id'>Primary Key Value</param>
  /// <returns>returns WorkItem if exist, otherwise returns null
  Future<WorkItem> getById(int id) async {
    if (id == null) {
      return null;
    }
    WorkItem obj;
    final data = await _mnWorkItem.getById(id);
    if (data.length != 0) {
      obj = WorkItem.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0) {
      id = await _mnWorkItem.insert(this);
    } else {
      id = await _upsert();
    }

    return id;
  }

  /// saveAs WorkItem. Returns a new Primary Key value of WorkItem

  /// <returns>Returns a new Primary Key value of WorkItem
  Future<int> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<WorkItem> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> saveAll(List<WorkItem> workitems) async {
    final results = _mnWorkItem.saveAll(
        'INSERT OR REPLACE INTO WorkItem (id,  createdTime, updatedTime, startTime, endTime, ProjectId, summary, details,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?)',
        workitems);
    return results;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> _upsert() async {
    try {
      id = await _mnWorkItem.rawInsert(
          'INSERT OR REPLACE INTO WorkItem (id,  createdTime, updatedTime, startTime, endTime, ProjectId, summary, details,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?)',
          [
            id,
            createdTime != null ? createdTime.millisecondsSinceEpoch : null,
            updatedTime != null ? updatedTime.millisecondsSinceEpoch : null,
            startTime != null ? startTime.millisecondsSinceEpoch : null,
            endTime != null ? endTime.millisecondsSinceEpoch : null,
            ProjectId,
            summary,
            details,
            isDeleted
          ]);
      saveResult = BoolResult(
          success: true, successMessage: 'WorkItem id=$id updated successfuly');
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'WorkItem Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<WorkItem>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> upsertAll(List<WorkItem> workitems) async {
    final results = await _mnWorkItem.rawInsertAll(
        'INSERT OR REPLACE INTO WorkItem (id,  createdTime, updatedTime, startTime, endTime, ProjectId, summary, details,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?)',
        workitems);
    return results;
  }

  /// Deletes WorkItem

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete WorkItem invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted) {
      return _mnWorkItem
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnWorkItem.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover WorkItem>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover WorkItem invoked (id=$id)');
    {
      return _mnWorkItem.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  //private WorkItemFilterBuilder _Select;
  WorkItemFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return WorkItemFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  WorkItemFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return WorkItemFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion workitem

// region WorkItemField
class WorkItemField extends SearchCriteria {
  WorkItemField(this.workitemFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  WorkItemFilterBuilder workitemFB;

  WorkItemField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  WorkItemFilterBuilder equals(var pValue) {
    param.expression = '=';
    workitemFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, workitemFB.parameters, param, SqlSyntax.EQuals,
            workitemFB._addedBlocks)
        : setCriteria(pValue, workitemFB.parameters, param, SqlSyntax.NotEQuals,
            workitemFB._addedBlocks);
    _waitingNot = '';
    workitemFB._addedBlocks.needEndBlock[workitemFB._blockIndex] =
        workitemFB._addedBlocks.retVal;
    return workitemFB;
  }

  WorkItemFilterBuilder equalsOrNull(var pValue) {
    param.expression = '=';
    workitemFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, workitemFB.parameters, param,
            SqlSyntax.EQualsOrNull, workitemFB._addedBlocks)
        : setCriteria(pValue, workitemFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, workitemFB._addedBlocks);
    _waitingNot = '';
    workitemFB._addedBlocks.needEndBlock[workitemFB._blockIndex] =
        workitemFB._addedBlocks.retVal;
    return workitemFB;
  }

  WorkItemFilterBuilder isNull() {
    workitemFB._addedBlocks = setCriteria(
        0,
        workitemFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        workitemFB._addedBlocks);
    _waitingNot = '';
    workitemFB._addedBlocks.needEndBlock[workitemFB._blockIndex] =
        workitemFB._addedBlocks.retVal;
    return workitemFB;
  }

  WorkItemFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      workitemFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          workitemFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          workitemFB._addedBlocks);
      _waitingNot = '';
      workitemFB._addedBlocks.needEndBlock[workitemFB._blockIndex] =
          workitemFB._addedBlocks.retVal;
    }
    return workitemFB;
  }

  WorkItemFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      workitemFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          workitemFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          workitemFB._addedBlocks);
      _waitingNot = '';
      workitemFB._addedBlocks.needEndBlock[workitemFB._blockIndex] =
          workitemFB._addedBlocks.retVal;
      workitemFB._addedBlocks.needEndBlock[workitemFB._blockIndex] =
          workitemFB._addedBlocks.retVal;
    }
    return workitemFB;
  }

  WorkItemFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      workitemFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          workitemFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          workitemFB._addedBlocks);
      _waitingNot = '';
      workitemFB._addedBlocks.needEndBlock[workitemFB._blockIndex] =
          workitemFB._addedBlocks.retVal;
    }
    return workitemFB;
  }

  WorkItemFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      workitemFB._addedBlocks = setCriteria(
          pFirst,
          workitemFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          workitemFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        workitemFB._addedBlocks = setCriteria(pFirst, workitemFB.parameters,
            param, SqlSyntax.LessThan, workitemFB._addedBlocks);
      } else {
        workitemFB._addedBlocks = setCriteria(pFirst, workitemFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, workitemFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        workitemFB._addedBlocks = setCriteria(pLast, workitemFB.parameters,
            param, SqlSyntax.GreaterThan, workitemFB._addedBlocks);
      } else {
        workitemFB._addedBlocks = setCriteria(pLast, workitemFB.parameters,
            param, SqlSyntax.LessThanOrEquals, workitemFB._addedBlocks);
      }
    }
    _waitingNot = '';
    workitemFB._addedBlocks.needEndBlock[workitemFB._blockIndex] =
        workitemFB._addedBlocks.retVal;
    return workitemFB;
  }

  WorkItemFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    workitemFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, workitemFB.parameters, param,
            SqlSyntax.GreaterThan, workitemFB._addedBlocks)
        : setCriteria(pValue, workitemFB.parameters, param,
            SqlSyntax.LessThanOrEquals, workitemFB._addedBlocks);
    _waitingNot = '';
    workitemFB._addedBlocks.needEndBlock[workitemFB._blockIndex] =
        workitemFB._addedBlocks.retVal;
    return workitemFB;
  }

  WorkItemFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    workitemFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, workitemFB.parameters, param, SqlSyntax.LessThan,
            workitemFB._addedBlocks)
        : setCriteria(pValue, workitemFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, workitemFB._addedBlocks);
    _waitingNot = '';
    workitemFB._addedBlocks.needEndBlock[workitemFB._blockIndex] =
        workitemFB._addedBlocks.retVal;
    return workitemFB;
  }

  WorkItemFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    workitemFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, workitemFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, workitemFB._addedBlocks)
        : setCriteria(pValue, workitemFB.parameters, param, SqlSyntax.LessThan,
            workitemFB._addedBlocks);
    _waitingNot = '';
    workitemFB._addedBlocks.needEndBlock[workitemFB._blockIndex] =
        workitemFB._addedBlocks.retVal;
    return workitemFB;
  }

  WorkItemFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    workitemFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, workitemFB.parameters, param,
            SqlSyntax.LessThanOrEquals, workitemFB._addedBlocks)
        : setCriteria(pValue, workitemFB.parameters, param,
            SqlSyntax.GreaterThan, workitemFB._addedBlocks);
    _waitingNot = '';
    workitemFB._addedBlocks.needEndBlock[workitemFB._blockIndex] =
        workitemFB._addedBlocks.retVal;
    return workitemFB;
  }

  WorkItemFilterBuilder inValues(var pValue) {
    workitemFB._addedBlocks = setCriteria(
        pValue,
        workitemFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        workitemFB._addedBlocks);
    _waitingNot = '';
    workitemFB._addedBlocks.needEndBlock[workitemFB._blockIndex] =
        workitemFB._addedBlocks.retVal;
    return workitemFB;
  }
}
// endregion WorkItemField

// region WorkItemFilterBuilder
class WorkItemFilterBuilder extends SearchCriteria {
  WorkItemFilterBuilder(WorkItem obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = List<DbParameter>();
    orderByList = List<String>();
    groupByList = List<String>();
    _addedBlocks = AddedBlocks(List<bool>(), List<bool>());
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  WorkItem _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  WorkItemFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  WorkItemFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  WorkItemFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  WorkItemFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter();
      _addedBlocks =
          setCriteria(0, parameters, param, '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  WorkItemFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  /// int count = LIMIT
  WorkItemFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  WorkItemFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  WorkItemFilterBuilder orderBy(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  WorkItemFilterBuilder orderByDesc(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s desc ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  WorkItemFilterBuilder groupBy(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') groupByList.add(' $s ');
        }
      }
    }
    return this;
  }

  WorkItemField setField(WorkItemField field, String colName, DbType dbtype) {
    return WorkItemField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  WorkItemField _id;
  WorkItemField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  WorkItemField _createdTime;
  WorkItemField get createdTime {
    return _createdTime =
        setField(_createdTime, 'createdTime', DbType.datetime);
  }

  WorkItemField _updatedTime;
  WorkItemField get updatedTime {
    return _updatedTime =
        setField(_updatedTime, 'updatedTime', DbType.datetime);
  }

  WorkItemField _startTime;
  WorkItemField get startTime {
    return _startTime = setField(_startTime, 'startTime', DbType.datetime);
  }

  WorkItemField _endTime;
  WorkItemField get endTime {
    return _endTime = setField(_endTime, 'endTime', DbType.datetime);
  }

  WorkItemField _ProjectId;
  WorkItemField get ProjectId {
    return _ProjectId = setField(_ProjectId, 'ProjectId', DbType.integer);
  }

  WorkItemField _summary;
  WorkItemField get summary {
    return _summary = setField(_summary, 'summary', DbType.text);
  }

  WorkItemField _details;
  WorkItemField get details {
    return _details = setField(_details, 'details', DbType.text);
  }

  WorkItemField _isDeleted;
  WorkItemField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll('[', '')
              .replaceAll(']', '')
              .toString();
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value =
                  param.value == null ? null : param.value == true ? 1 : 0;
              param.value2 =
                  param.value2 == null ? null : param.value2 == true ? 1 : 0;
              break;
            case DbType.date:
            case DbType.datetime:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            whereArguments.add(param.value);
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (WorkItem._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',');
  }

  /// Deletes List<WorkItem> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();
    if (WorkItem._softDeleteActivated && !hardDelete) {
      r = await _obj._mnWorkItem.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnWorkItem.delete(qparams);
    }
    return r;
  }

  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover WorkItem bulk invoked');
    return _obj._mnWorkItem.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from WorkItem ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnWorkItem.updateBatch(qparams, values);
  }

  /// This method always returns WorkItemObj if exist, otherwise returns null
  /// <returns>List<WorkItem>
  Future<WorkItem> toSingle([VoidCallback workitem(WorkItem o)]) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnWorkItem.toList(qparams);
    final data = await objFuture;
    WorkItem obj;
    if (data.isNotEmpty) {
      obj = WorkItem.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    if (workitem != null) {
      workitem(obj);
    }
    return obj;
  }

  /// This method always returns int.
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback workitemCount(int c)]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final workitemsFuture = await _obj._mnWorkItem.toList(qparams);
    final int count = workitemsFuture[0]['CNT'] as int;
    if (workitemCount != null) {
      workitemCount(count);
    }
    return count;
  }

  /// This method always returns List<WorkItem>.
  /// <returns>List<WorkItem>
  Future<List<WorkItem>> toList(
      [VoidCallback workitemList(List<WorkItem> o)]) async {
    final data = await toMapList();
    final List<WorkItem> workitemsData = await WorkItem.fromMapList(data);
    if (workitemList != null) workitemList(workitemsData);
    return workitemsData;
  }

  /// This method always returns Json String
  Future<String> toJson() async {
    final list = List<dynamic>();
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method always returns Json String.
  Future<String> toJsonWithChilds() async {
    final list = List<dynamic>();
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChilds(false, true));
    }
    return json.encode(list);
  }

  /// This method always returns List<dynamic>.
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnWorkItem.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<WorkItem>>
  Future<List<DropdownMenuItem<WorkItem>>> toDropDownMenu(
      String displayTextColumn,
      [VoidCallback dropDownMenu(List<DropdownMenuItem<WorkItem>> o)]) async {
    _buildParameters();
    final workitemsFuture = _obj._mnWorkItem.toList(qparams);

    final data = await workitemsFuture;
    final int count = data.length;
    final List<DropdownMenuItem<WorkItem>> items = List()
      ..add(DropdownMenuItem(
        value: WorkItem(),
        child: Text('Select WorkItem'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: WorkItem.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback dropDownMenu(List<DropdownMenuItem<int>> o)]) async {
    _buildParameters();
    qparams.selectColumns = ['id', displayTextColumn];
    final workitemsFuture = _obj._mnWorkItem.toList(qparams);

    final data = await workitemsFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = List()
      ..add(DropdownMenuItem(
        value: 0,
        child: Text('Select WorkItem'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['id'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) _buildParameters();
    final List<int> idData = List<int>();
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnWorkItem.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject(
      [VoidCallback listObject(List<dynamic> o)]) async {
    _buildParameters();

    final objectFuture = _obj._mnWorkItem.toList(qparams);

    final List<dynamic> objectsData = List<dynamic>();
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    if (listObject != null) {
      listObject(objectsData);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await WorkItem.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback listString(List<String> o)]) async {
    _buildParameters();

    final objectFuture = _obj._mnWorkItem.toList(qparams);

    final List<String> objectsData = List<String>();
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion WorkItemFilterBuilder

// region WorkItemFields
class WorkItemFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fCreatedTime;
  static TableField get createdTime {
    return _fCreatedTime = _fCreatedTime ??
        SqlSyntax.setField(_fCreatedTime, 'createdTime', DbType.datetime);
  }

  static TableField _fUpdatedTime;
  static TableField get updatedTime {
    return _fUpdatedTime = _fUpdatedTime ??
        SqlSyntax.setField(_fUpdatedTime, 'updatedTime', DbType.datetime);
  }

  static TableField _fStartTime;
  static TableField get startTime {
    return _fStartTime = _fStartTime ??
        SqlSyntax.setField(_fStartTime, 'startTime', DbType.datetime);
  }

  static TableField _fEndTime;
  static TableField get endTime {
    return _fEndTime =
        _fEndTime ?? SqlSyntax.setField(_fEndTime, 'endTime', DbType.datetime);
  }

  static TableField _fProjectId;
  static TableField get ProjectId {
    return _fProjectId = _fProjectId ??
        SqlSyntax.setField(_fProjectId, 'ProjectId', DbType.integer);
  }

  static TableField _fSummary;
  static TableField get summary {
    return _fSummary =
        _fSummary ?? SqlSyntax.setField(_fSummary, 'summary', DbType.text);
  }

  static TableField _fDetails;
  static TableField get details {
    return _fDetails =
        _fDetails ?? SqlSyntax.setField(_fDetails, 'details', DbType.text);
  }

  static TableField _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion WorkItemFields

//region WorkItemManager
class WorkItemManager extends SqfEntityProvider {
  WorkItemManager()
      : super(TimeManager(), tableName: _tableName, colId: _colId);
  static String _tableName = 'WorkItem';
  static String _colId = 'id';
}

//endregion WorkItemManager
// region Project
class Project {
  Project(
      {this.id,
      this.createdTime,
      this.updatedTime,
      this.ApplicationId,
      this.name,
      this.description,
      this.priority,
      this.StatusTypeId,
      this.startedTime,
      this.completedTime,
      this.ProjectTypeId,
      this.isDeleted}) {
    _setDefaultValues();
  }
  Project.withFields(
      this.createdTime,
      this.updatedTime,
      this.ApplicationId,
      this.name,
      this.description,
      this.priority,
      this.StatusTypeId,
      this.startedTime,
      this.completedTime,
      this.ProjectTypeId,
      this.isDeleted) {
    _setDefaultValues();
  }
  Project.withId(
      this.id,
      this.createdTime,
      this.updatedTime,
      this.ApplicationId,
      this.name,
      this.description,
      this.priority,
      this.StatusTypeId,
      this.startedTime,
      this.completedTime,
      this.ProjectTypeId,
      this.isDeleted) {
    _setDefaultValues();
  }
  Project.fromMap(Map<String, dynamic> o) {
    id = o['id'] as int;
    createdTime = o['createdTime'] != null
        ? int.tryParse(o['createdTime'].toString()) != null
            ? DateTime.fromMillisecondsSinceEpoch(o['createdTime'] as int)
            : DateTime.tryParse(o['createdTime'].toString())
        : null;
    updatedTime = o['updatedTime'] != null
        ? int.tryParse(o['updatedTime'].toString()) != null
            ? DateTime.fromMillisecondsSinceEpoch(o['updatedTime'] as int)
            : DateTime.tryParse(o['updatedTime'].toString())
        : null;
    ApplicationId = o['ApplicationId'] as int;

    name = o['name'] as String;
    description = o['description'] as String;
    priority = o['priority'] as int;
    StatusTypeId = o['StatusTypeId'] as int;

    startedTime = o['startedTime'] != null
        ? int.tryParse(o['startedTime'].toString()) != null
            ? DateTime.fromMillisecondsSinceEpoch(o['startedTime'] as int)
            : DateTime.tryParse(o['startedTime'].toString())
        : null;
    completedTime = o['completedTime'] != null
        ? int.tryParse(o['completedTime'].toString()) != null
            ? DateTime.fromMillisecondsSinceEpoch(o['completedTime'] as int)
            : DateTime.tryParse(o['completedTime'].toString())
        : null;
    ProjectTypeId = o['ProjectTypeId'] as int;

    isDeleted = o['isDeleted'] != null ? o['isDeleted'] == 1 : null;
  }
  // FIELDS (Project)
  int id;
  DateTime createdTime;
  DateTime updatedTime;
  int ApplicationId;
  String name;
  String description;
  int priority;
  int StatusTypeId;
  DateTime startedTime;
  DateTime completedTime;
  int ProjectTypeId;
  bool isDeleted;

  BoolResult saveResult;
  // end FIELDS (Project)

// RELATIONSHIPS (Project)
  /// get Application By ApplicationId
  Future<Application> getApplication(
      [VoidCallback application(Application o)]) async {
    final _obj = await Application().getById(ApplicationId);
    if (application != null) {
      application(_obj);
    }
    return _obj;
  }

  /// get StatusType By StatusTypeId
  Future<StatusType> getStatusType(
      [VoidCallback statustype(StatusType o)]) async {
    final _obj = await StatusType().getById(StatusTypeId);
    if (statustype != null) {
      statustype(_obj);
    }
    return _obj;
  }

  /// get ProjectType By ProjectTypeId
  Future<ProjectType> getProjectType(
      [VoidCallback projecttype(ProjectType o)]) async {
    final _obj = await ProjectType().getById(ProjectTypeId);
    if (projecttype != null) {
      projecttype(_obj);
    }
    return _obj;
  }
  // END RELATIONSHIPS (Project)

// COLLECTIONS (Project)
  /// get WorkItem(s) filtered by ProjectId=id
  WorkItemFilterBuilder getWorkItems(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return WorkItem()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .ProjectId
        .equals(id)
        .and;
  }
// END COLLECTIONS (Project)

  static const bool _softDeleteActivated = true;
  ProjectManager __mnProject;

  ProjectManager get _mnProject {
    return __mnProject = __mnProject ?? ProjectManager();
  }

  // METHODS
  Map<String, dynamic> toMap({bool forQuery = false, bool forJson = false}) {
    final map = Map<String, dynamic>();
    if (id != null) {
      map['id'] = id;
    }
    if (createdTime != null) {
      map['createdTime'] = forJson
          ? createdTime.toUtc().toString()
          : forQuery ? createdTime.millisecondsSinceEpoch : createdTime;
    }

    if (updatedTime != null) {
      map['updatedTime'] = forJson
          ? updatedTime.toUtc().toString()
          : forQuery ? updatedTime.millisecondsSinceEpoch : updatedTime;
    }

    if (ApplicationId != null) {
      map['ApplicationId'] = ApplicationId;
    }

    if (name != null) {
      map['name'] = name;
    }

    if (description != null) {
      map['description'] = description;
    }

    if (priority != null) {
      map['priority'] = priority;
    }

    if (StatusTypeId != null) {
      map['StatusTypeId'] = StatusTypeId;
    }

    if (startedTime != null) {
      map['startedTime'] = forJson
          ? startedTime.toUtc().toString()
          : forQuery ? startedTime.millisecondsSinceEpoch : startedTime;
    }

    if (completedTime != null) {
      map['completedTime'] = forJson
          ? completedTime.toUtc().toString()
          : forQuery ? completedTime.millisecondsSinceEpoch : completedTime;
    }

    if (ProjectTypeId != null) {
      map['ProjectTypeId'] = ProjectTypeId;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChilds(
      [bool forQuery = false, bool forJson = false]) async {
    final map = Map<String, dynamic>();
    if (id != null) {
      map['id'] = id;
    }
    if (createdTime != null) {
      map['createdTime'] = forJson
          ? createdTime.toUtc().toString()
          : forQuery ? createdTime.millisecondsSinceEpoch : createdTime;
    }

    if (updatedTime != null) {
      map['updatedTime'] = forJson
          ? updatedTime.toUtc().toString()
          : forQuery ? updatedTime.millisecondsSinceEpoch : updatedTime;
    }

    if (ApplicationId != null) {
      map['ApplicationId'] = ApplicationId;
    }

    if (name != null) {
      map['name'] = name;
    }

    if (description != null) {
      map['description'] = description;
    }

    if (priority != null) {
      map['priority'] = priority;
    }

    if (StatusTypeId != null) {
      map['StatusTypeId'] = StatusTypeId;
    }

    if (startedTime != null) {
      map['startedTime'] = forJson
          ? startedTime.toUtc().toString()
          : forQuery ? startedTime.millisecondsSinceEpoch : startedTime;
    }

    if (completedTime != null) {
      map['completedTime'] = forJson
          ? completedTime.toUtc().toString()
          : forQuery ? completedTime.millisecondsSinceEpoch : completedTime;
    }

    if (ProjectTypeId != null) {
      map['ProjectTypeId'] = ProjectTypeId;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

// COLLECTIONS (Project)
    if (!forQuery) {
      map['WorkItems'] = await getWorkItems().toMapList();
    }
// END COLLECTIONS (Project)

    return map;
  }

  /// This method always returns Json String
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method always returns Json String
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChilds(false, true));
  }

  List<dynamic> toArgs() {
    return [
      id,
      createdTime != null ? createdTime.millisecondsSinceEpoch : null,
      updatedTime != null ? updatedTime.millisecondsSinceEpoch : null,
      ApplicationId,
      name,
      description,
      priority,
      StatusTypeId,
      startedTime != null ? startedTime.millisecondsSinceEpoch : null,
      completedTime != null ? completedTime.millisecondsSinceEpoch : null,
      ProjectTypeId,
      isDeleted
    ];
  }

  static Future<List<Project>> fromWebUrl(String url) async {
    try {
      final response = await http.get(url);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Project.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  static Future<List<Project>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = List<Project>();
    try {
      objList = list
          .map((project) => Project.fromMap(project as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR Project.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Project>> fromObjectList(Future<List<dynamic>> o) async {
    final data = await o;
    return await Project.fromMapList(data);
  }

  static Future<List<Project>> fromMapList(List<dynamic> data) async {
    final List<Project> objList = List<Project>();
    for (final Map map in data as List<Map>) {
      final obj = Project.fromMap(map as Map<String, dynamic>);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Project by ID if exist, otherwise returns null
  /// <param name='id'>Primary Key Value</param>
  /// <returns>returns Project if exist, otherwise returns null
  Future<Project> getById(int id) async {
    if (id == null) {
      return null;
    }
    Project obj;
    final data = await _mnProject.getById(id);
    if (data.length != 0) {
      obj = Project.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0) {
      id = await _mnProject.insert(this);
    } else {
      id = await _upsert();
    }

    return id;
  }

  /// saveAs Project. Returns a new Primary Key value of Project

  /// <returns>Returns a new Primary Key value of Project
  Future<int> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<Project> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> saveAll(List<Project> projects) async {
    final results = _mnProject.saveAll(
        'INSERT OR REPLACE INTO Project (id,  createdTime, updatedTime, ApplicationId, name, description, priority, StatusTypeId, startedTime, completedTime, ProjectTypeId,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?)',
        projects);
    return results;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> _upsert() async {
    try {
      id = await _mnProject.rawInsert(
          'INSERT OR REPLACE INTO Project (id,  createdTime, updatedTime, ApplicationId, name, description, priority, StatusTypeId, startedTime, completedTime, ProjectTypeId,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?)',
          [
            id,
            createdTime != null ? createdTime.millisecondsSinceEpoch : null,
            updatedTime != null ? updatedTime.millisecondsSinceEpoch : null,
            ApplicationId,
            name,
            description,
            priority,
            StatusTypeId,
            startedTime != null ? startedTime.millisecondsSinceEpoch : null,
            completedTime != null ? completedTime.millisecondsSinceEpoch : null,
            ProjectTypeId,
            isDeleted
          ]);
      saveResult = BoolResult(
          success: true, successMessage: 'Project id=$id updated successfuly');
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Project Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<Project>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> upsertAll(List<Project> projects) async {
    final results = await _mnProject.rawInsertAll(
        'INSERT OR REPLACE INTO Project (id,  createdTime, updatedTime, ApplicationId, name, description, priority, StatusTypeId, startedTime, completedTime, ProjectTypeId,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?)',
        projects);
    return results;
  }

  /// Deletes Project

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Project invoked (id=$id)');
    var result = BoolResult();
    {
      result =
          await WorkItem().select().ProjectId.equals(id).delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete || isDeleted) {
      return _mnProject
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnProject.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Project>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover Project invoked (id=$id)');
    var result = BoolResult();
    if (recoverChilds) {
      result = await WorkItem()
          .select(getIsDeleted: true)
          .isDeleted
          .equals(true)
          .and
          .ProjectId
          .equals(id)
          .update({'isDeleted': 0});
    }
    if (!result.success && recoverChilds) {
      return result;
    }
    {
      return _mnProject.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  //private ProjectFilterBuilder _Select;
  ProjectFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return ProjectFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  ProjectFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return ProjectFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion project

// region ProjectField
class ProjectField extends SearchCriteria {
  ProjectField(this.projectFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  ProjectFilterBuilder projectFB;

  ProjectField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  ProjectFilterBuilder equals(var pValue) {
    param.expression = '=';
    projectFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, projectFB.parameters, param, SqlSyntax.EQuals,
            projectFB._addedBlocks)
        : setCriteria(pValue, projectFB.parameters, param, SqlSyntax.NotEQuals,
            projectFB._addedBlocks);
    _waitingNot = '';
    projectFB._addedBlocks.needEndBlock[projectFB._blockIndex] =
        projectFB._addedBlocks.retVal;
    return projectFB;
  }

  ProjectFilterBuilder equalsOrNull(var pValue) {
    param.expression = '=';
    projectFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, projectFB.parameters, param,
            SqlSyntax.EQualsOrNull, projectFB._addedBlocks)
        : setCriteria(pValue, projectFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, projectFB._addedBlocks);
    _waitingNot = '';
    projectFB._addedBlocks.needEndBlock[projectFB._blockIndex] =
        projectFB._addedBlocks.retVal;
    return projectFB;
  }

  ProjectFilterBuilder isNull() {
    projectFB._addedBlocks = setCriteria(
        0,
        projectFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        projectFB._addedBlocks);
    _waitingNot = '';
    projectFB._addedBlocks.needEndBlock[projectFB._blockIndex] =
        projectFB._addedBlocks.retVal;
    return projectFB;
  }

  ProjectFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      projectFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          projectFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          projectFB._addedBlocks);
      _waitingNot = '';
      projectFB._addedBlocks.needEndBlock[projectFB._blockIndex] =
          projectFB._addedBlocks.retVal;
    }
    return projectFB;
  }

  ProjectFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      projectFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          projectFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          projectFB._addedBlocks);
      _waitingNot = '';
      projectFB._addedBlocks.needEndBlock[projectFB._blockIndex] =
          projectFB._addedBlocks.retVal;
      projectFB._addedBlocks.needEndBlock[projectFB._blockIndex] =
          projectFB._addedBlocks.retVal;
    }
    return projectFB;
  }

  ProjectFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      projectFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          projectFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          projectFB._addedBlocks);
      _waitingNot = '';
      projectFB._addedBlocks.needEndBlock[projectFB._blockIndex] =
          projectFB._addedBlocks.retVal;
    }
    return projectFB;
  }

  ProjectFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      projectFB._addedBlocks = setCriteria(
          pFirst,
          projectFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          projectFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        projectFB._addedBlocks = setCriteria(pFirst, projectFB.parameters,
            param, SqlSyntax.LessThan, projectFB._addedBlocks);
      } else {
        projectFB._addedBlocks = setCriteria(pFirst, projectFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, projectFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        projectFB._addedBlocks = setCriteria(pLast, projectFB.parameters, param,
            SqlSyntax.GreaterThan, projectFB._addedBlocks);
      } else {
        projectFB._addedBlocks = setCriteria(pLast, projectFB.parameters, param,
            SqlSyntax.LessThanOrEquals, projectFB._addedBlocks);
      }
    }
    _waitingNot = '';
    projectFB._addedBlocks.needEndBlock[projectFB._blockIndex] =
        projectFB._addedBlocks.retVal;
    return projectFB;
  }

  ProjectFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    projectFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, projectFB.parameters, param,
            SqlSyntax.GreaterThan, projectFB._addedBlocks)
        : setCriteria(pValue, projectFB.parameters, param,
            SqlSyntax.LessThanOrEquals, projectFB._addedBlocks);
    _waitingNot = '';
    projectFB._addedBlocks.needEndBlock[projectFB._blockIndex] =
        projectFB._addedBlocks.retVal;
    return projectFB;
  }

  ProjectFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    projectFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, projectFB.parameters, param, SqlSyntax.LessThan,
            projectFB._addedBlocks)
        : setCriteria(pValue, projectFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, projectFB._addedBlocks);
    _waitingNot = '';
    projectFB._addedBlocks.needEndBlock[projectFB._blockIndex] =
        projectFB._addedBlocks.retVal;
    return projectFB;
  }

  ProjectFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    projectFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, projectFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, projectFB._addedBlocks)
        : setCriteria(pValue, projectFB.parameters, param, SqlSyntax.LessThan,
            projectFB._addedBlocks);
    _waitingNot = '';
    projectFB._addedBlocks.needEndBlock[projectFB._blockIndex] =
        projectFB._addedBlocks.retVal;
    return projectFB;
  }

  ProjectFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    projectFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, projectFB.parameters, param,
            SqlSyntax.LessThanOrEquals, projectFB._addedBlocks)
        : setCriteria(pValue, projectFB.parameters, param,
            SqlSyntax.GreaterThan, projectFB._addedBlocks);
    _waitingNot = '';
    projectFB._addedBlocks.needEndBlock[projectFB._blockIndex] =
        projectFB._addedBlocks.retVal;
    return projectFB;
  }

  ProjectFilterBuilder inValues(var pValue) {
    projectFB._addedBlocks = setCriteria(
        pValue,
        projectFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        projectFB._addedBlocks);
    _waitingNot = '';
    projectFB._addedBlocks.needEndBlock[projectFB._blockIndex] =
        projectFB._addedBlocks.retVal;
    return projectFB;
  }
}
// endregion ProjectField

// region ProjectFilterBuilder
class ProjectFilterBuilder extends SearchCriteria {
  ProjectFilterBuilder(Project obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = List<DbParameter>();
    orderByList = List<String>();
    groupByList = List<String>();
    _addedBlocks = AddedBlocks(List<bool>(), List<bool>());
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Project _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  ProjectFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  ProjectFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  ProjectFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  ProjectFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter();
      _addedBlocks =
          setCriteria(0, parameters, param, '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  ProjectFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  /// int count = LIMIT
  ProjectFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  ProjectFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  ProjectFilterBuilder orderBy(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  ProjectFilterBuilder orderByDesc(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s desc ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  ProjectFilterBuilder groupBy(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') groupByList.add(' $s ');
        }
      }
    }
    return this;
  }

  ProjectField setField(ProjectField field, String colName, DbType dbtype) {
    return ProjectField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  ProjectField _id;
  ProjectField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  ProjectField _createdTime;
  ProjectField get createdTime {
    return _createdTime =
        setField(_createdTime, 'createdTime', DbType.datetime);
  }

  ProjectField _updatedTime;
  ProjectField get updatedTime {
    return _updatedTime =
        setField(_updatedTime, 'updatedTime', DbType.datetime);
  }

  ProjectField _ApplicationId;
  ProjectField get ApplicationId {
    return _ApplicationId =
        setField(_ApplicationId, 'ApplicationId', DbType.integer);
  }

  ProjectField _name;
  ProjectField get name {
    return _name = setField(_name, 'name', DbType.text);
  }

  ProjectField _description;
  ProjectField get description {
    return _description = setField(_description, 'description', DbType.text);
  }

  ProjectField _priority;
  ProjectField get priority {
    return _priority = setField(_priority, 'priority', DbType.integer);
  }

  ProjectField _StatusTypeId;
  ProjectField get StatusTypeId {
    return _StatusTypeId =
        setField(_StatusTypeId, 'StatusTypeId', DbType.integer);
  }

  ProjectField _startedTime;
  ProjectField get startedTime {
    return _startedTime =
        setField(_startedTime, 'startedTime', DbType.datetime);
  }

  ProjectField _completedTime;
  ProjectField get completedTime {
    return _completedTime =
        setField(_completedTime, 'completedTime', DbType.datetime);
  }

  ProjectField _ProjectTypeId;
  ProjectField get ProjectTypeId {
    return _ProjectTypeId =
        setField(_ProjectTypeId, 'ProjectTypeId', DbType.integer);
  }

  ProjectField _isDeleted;
  ProjectField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll('[', '')
              .replaceAll(']', '')
              .toString();
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value =
                  param.value == null ? null : param.value == true ? 1 : 0;
              param.value2 =
                  param.value2 == null ? null : param.value2 == true ? 1 : 0;
              break;
            case DbType.date:
            case DbType.datetime:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            whereArguments.add(param.value);
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Project._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',');
  }

  /// Deletes List<Project> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();
    final workItemByProjectIdidList = await toListPrimaryKey(false);
    await WorkItem()
        .select()
        .ProjectId
        .inValues(workItemByProjectIdidList)
        .delete(hardDelete);

    if (Project._softDeleteActivated && !hardDelete) {
      r = await _obj._mnProject.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnProject.delete(qparams);
    }
    return r;
  }

  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover Project bulk invoked');
    final workItemByProjectIdidList = await toListPrimaryKey(false);
    await WorkItem()
        .select(getIsDeleted: true)
        .isDeleted
        .equals(true)
        .and
        .ProjectId
        .inValues(workItemByProjectIdidList)
        .update({'isDeleted': 0});
    return _obj._mnProject.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from Project ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnProject.updateBatch(qparams, values);
  }

  /// This method always returns ProjectObj if exist, otherwise returns null
  /// <returns>List<Project>
  Future<Project> toSingle([VoidCallback project(Project o)]) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnProject.toList(qparams);
    final data = await objFuture;
    Project obj;
    if (data.isNotEmpty) {
      obj = Project.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    if (project != null) {
      project(obj);
    }
    return obj;
  }

  /// This method always returns int.
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback projectCount(int c)]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final projectsFuture = await _obj._mnProject.toList(qparams);
    final int count = projectsFuture[0]['CNT'] as int;
    if (projectCount != null) {
      projectCount(count);
    }
    return count;
  }

  /// This method always returns List<Project>.
  /// <returns>List<Project>
  Future<List<Project>> toList(
      [VoidCallback projectList(List<Project> o)]) async {
    final data = await toMapList();
    final List<Project> projectsData = await Project.fromMapList(data);
    if (projectList != null) projectList(projectsData);
    return projectsData;
  }

  /// This method always returns Json String
  Future<String> toJson() async {
    final list = List<dynamic>();
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method always returns Json String.
  Future<String> toJsonWithChilds() async {
    final list = List<dynamic>();
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChilds(false, true));
    }
    return json.encode(list);
  }

  /// This method always returns List<dynamic>.
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnProject.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<Project>>
  Future<List<DropdownMenuItem<Project>>> toDropDownMenu(
      String displayTextColumn,
      [VoidCallback dropDownMenu(List<DropdownMenuItem<Project>> o)]) async {
    _buildParameters();
    final projectsFuture = _obj._mnProject.toList(qparams);

    final data = await projectsFuture;
    final int count = data.length;
    final List<DropdownMenuItem<Project>> items = List()
      ..add(DropdownMenuItem(
        value: Project(),
        child: Text('Select Project'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: Project.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback dropDownMenu(List<DropdownMenuItem<int>> o)]) async {
    _buildParameters();
    qparams.selectColumns = ['id', displayTextColumn];
    final projectsFuture = _obj._mnProject.toList(qparams);

    final data = await projectsFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = List()
      ..add(DropdownMenuItem(
        value: 0,
        child: Text('Select Project'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['id'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) _buildParameters();
    final List<int> idData = List<int>();
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnProject.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject(
      [VoidCallback listObject(List<dynamic> o)]) async {
    _buildParameters();

    final objectFuture = _obj._mnProject.toList(qparams);

    final List<dynamic> objectsData = List<dynamic>();
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    if (listObject != null) {
      listObject(objectsData);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Project.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback listString(List<String> o)]) async {
    _buildParameters();

    final objectFuture = _obj._mnProject.toList(qparams);

    final List<String> objectsData = List<String>();
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion ProjectFilterBuilder

// region ProjectFields
class ProjectFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fCreatedTime;
  static TableField get createdTime {
    return _fCreatedTime = _fCreatedTime ??
        SqlSyntax.setField(_fCreatedTime, 'createdTime', DbType.datetime);
  }

  static TableField _fUpdatedTime;
  static TableField get updatedTime {
    return _fUpdatedTime = _fUpdatedTime ??
        SqlSyntax.setField(_fUpdatedTime, 'updatedTime', DbType.datetime);
  }

  static TableField _fApplicationId;
  static TableField get ApplicationId {
    return _fApplicationId = _fApplicationId ??
        SqlSyntax.setField(_fApplicationId, 'ApplicationId', DbType.integer);
  }

  static TableField _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField _fDescription;
  static TableField get description {
    return _fDescription = _fDescription ??
        SqlSyntax.setField(_fDescription, 'description', DbType.text);
  }

  static TableField _fPriority;
  static TableField get priority {
    return _fPriority = _fPriority ??
        SqlSyntax.setField(_fPriority, 'priority', DbType.integer);
  }

  static TableField _fStatusTypeId;
  static TableField get StatusTypeId {
    return _fStatusTypeId = _fStatusTypeId ??
        SqlSyntax.setField(_fStatusTypeId, 'StatusTypeId', DbType.integer);
  }

  static TableField _fStartedTime;
  static TableField get startedTime {
    return _fStartedTime = _fStartedTime ??
        SqlSyntax.setField(_fStartedTime, 'startedTime', DbType.datetime);
  }

  static TableField _fCompletedTime;
  static TableField get completedTime {
    return _fCompletedTime = _fCompletedTime ??
        SqlSyntax.setField(_fCompletedTime, 'completedTime', DbType.datetime);
  }

  static TableField _fProjectTypeId;
  static TableField get ProjectTypeId {
    return _fProjectTypeId = _fProjectTypeId ??
        SqlSyntax.setField(_fProjectTypeId, 'ProjectTypeId', DbType.integer);
  }

  static TableField _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion ProjectFields

//region ProjectManager
class ProjectManager extends SqfEntityProvider {
  ProjectManager() : super(TimeManager(), tableName: _tableName, colId: _colId);
  static String _tableName = 'Project';
  static String _colId = 'id';
}

//endregion ProjectManager
// region Application
class Application {
  Application(
      {this.id,
      this.createdTime,
      this.updatedTime,
      this.name,
      this.description,
      this.version,
      this.workStartedDate,
      this.workEndedDate,
      this.isDeleted}) {
    _setDefaultValues();
  }
  Application.withFields(
      this.createdTime,
      this.updatedTime,
      this.name,
      this.description,
      this.version,
      this.workStartedDate,
      this.workEndedDate,
      this.isDeleted) {
    _setDefaultValues();
  }
  Application.withId(
      this.id,
      this.createdTime,
      this.updatedTime,
      this.name,
      this.description,
      this.version,
      this.workStartedDate,
      this.workEndedDate,
      this.isDeleted) {
    _setDefaultValues();
  }
  Application.fromMap(Map<String, dynamic> o) {
    id = o['id'] as int;
    createdTime = o['createdTime'] != null
        ? int.tryParse(o['createdTime'].toString()) != null
            ? DateTime.fromMillisecondsSinceEpoch(o['createdTime'] as int)
            : DateTime.tryParse(o['createdTime'].toString())
        : null;
    updatedTime = o['updatedTime'] != null
        ? int.tryParse(o['updatedTime'].toString()) != null
            ? DateTime.fromMillisecondsSinceEpoch(o['updatedTime'] as int)
            : DateTime.tryParse(o['updatedTime'].toString())
        : null;
    name = o['name'] as String;
    description = o['description'] as String;
    version = o['version'] as String;
    workStartedDate = o['workStartedDate'] != null
        ? int.tryParse(o['workStartedDate'].toString()) != null
            ? DateTime.fromMillisecondsSinceEpoch(o['workStartedDate'] as int)
            : DateTime.tryParse(o['workStartedDate'].toString())
        : null;
    workEndedDate = o['workEndedDate'] != null
        ? int.tryParse(o['workEndedDate'].toString()) != null
            ? DateTime.fromMillisecondsSinceEpoch(o['workEndedDate'] as int)
            : DateTime.tryParse(o['workEndedDate'].toString())
        : null;
    isDeleted = o['isDeleted'] != null ? o['isDeleted'] == 1 : null;
  }
  // FIELDS (Application)
  int id;
  DateTime createdTime;
  DateTime updatedTime;
  String name;
  String description;
  String version;
  DateTime workStartedDate;
  DateTime workEndedDate;
  bool isDeleted;

  BoolResult saveResult;
  // end FIELDS (Application)

// COLLECTIONS (Application)
  /// get Project(s) filtered by ApplicationId=id
  ProjectFilterBuilder getProjects(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return Project()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .ApplicationId
        .equals(id)
        .and;
  }
// END COLLECTIONS (Application)

  static const bool _softDeleteActivated = true;
  ApplicationManager __mnApplication;

  ApplicationManager get _mnApplication {
    return __mnApplication = __mnApplication ?? ApplicationManager();
  }

  // METHODS
  Map<String, dynamic> toMap({bool forQuery = false, bool forJson = false}) {
    final map = Map<String, dynamic>();
    if (id != null) {
      map['id'] = id;
    }
    if (createdTime != null) {
      map['createdTime'] = forJson
          ? createdTime.toUtc().toString()
          : forQuery ? createdTime.millisecondsSinceEpoch : createdTime;
    }

    if (updatedTime != null) {
      map['updatedTime'] = forJson
          ? updatedTime.toUtc().toString()
          : forQuery ? updatedTime.millisecondsSinceEpoch : updatedTime;
    }

    if (name != null) {
      map['name'] = name;
    }

    if (description != null) {
      map['description'] = description;
    }

    if (version != null) {
      map['version'] = version;
    }

    if (workStartedDate != null) {
      map['workStartedDate'] = forJson
          ? workStartedDate.toUtc().toString()
          : forQuery ? workStartedDate.millisecondsSinceEpoch : workStartedDate;
    }

    if (workEndedDate != null) {
      map['workEndedDate'] = forJson
          ? workEndedDate.toUtc().toString()
          : forQuery ? workEndedDate.millisecondsSinceEpoch : workEndedDate;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChilds(
      [bool forQuery = false, bool forJson = false]) async {
    final map = Map<String, dynamic>();
    if (id != null) {
      map['id'] = id;
    }
    if (createdTime != null) {
      map['createdTime'] = forJson
          ? createdTime.toUtc().toString()
          : forQuery ? createdTime.millisecondsSinceEpoch : createdTime;
    }

    if (updatedTime != null) {
      map['updatedTime'] = forJson
          ? updatedTime.toUtc().toString()
          : forQuery ? updatedTime.millisecondsSinceEpoch : updatedTime;
    }

    if (name != null) {
      map['name'] = name;
    }

    if (description != null) {
      map['description'] = description;
    }

    if (version != null) {
      map['version'] = version;
    }

    if (workStartedDate != null) {
      map['workStartedDate'] = forJson
          ? workStartedDate.toUtc().toString()
          : forQuery ? workStartedDate.millisecondsSinceEpoch : workStartedDate;
    }

    if (workEndedDate != null) {
      map['workEndedDate'] = forJson
          ? workEndedDate.toUtc().toString()
          : forQuery ? workEndedDate.millisecondsSinceEpoch : workEndedDate;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

// COLLECTIONS (Application)
    if (!forQuery) {
      map['Projects'] = await getProjects().toMapList();
    }
// END COLLECTIONS (Application)

    return map;
  }

  /// This method always returns Json String
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method always returns Json String
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChilds(false, true));
  }

  List<dynamic> toArgs() {
    return [
      id,
      createdTime != null ? createdTime.millisecondsSinceEpoch : null,
      updatedTime != null ? updatedTime.millisecondsSinceEpoch : null,
      name,
      description,
      version,
      workStartedDate != null ? workStartedDate.millisecondsSinceEpoch : null,
      workEndedDate != null ? workEndedDate.millisecondsSinceEpoch : null,
      isDeleted
    ];
  }

  static Future<List<Application>> fromWebUrl(String url) async {
    try {
      final response = await http.get(url);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Application.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  static Future<List<Application>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = List<Application>();
    try {
      objList = list
          .map((application) =>
              Application.fromMap(application as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR Application.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Application>> fromObjectList(
      Future<List<dynamic>> o) async {
    final data = await o;
    return await Application.fromMapList(data);
  }

  static Future<List<Application>> fromMapList(List<dynamic> data) async {
    final List<Application> objList = List<Application>();
    for (final Map map in data as List<Map>) {
      final obj = Application.fromMap(map as Map<String, dynamic>);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Application by ID if exist, otherwise returns null
  /// <param name='id'>Primary Key Value</param>
  /// <returns>returns Application if exist, otherwise returns null
  Future<Application> getById(int id) async {
    if (id == null) {
      return null;
    }
    Application obj;
    final data = await _mnApplication.getById(id);
    if (data.length != 0) {
      obj = Application.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0) {
      id = await _mnApplication.insert(this);
    } else {
      id = await _upsert();
    }

    return id;
  }

  /// saveAs Application. Returns a new Primary Key value of Application

  /// <returns>Returns a new Primary Key value of Application
  Future<int> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<Application> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> saveAll(List<Application> applications) async {
    final results = _mnApplication.saveAll(
        'INSERT OR REPLACE INTO Application (id,  createdTime, updatedTime, name, description, version, workStartedDate, workEndedDate,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?)',
        applications);
    return results;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> _upsert() async {
    try {
      id = await _mnApplication.rawInsert(
          'INSERT OR REPLACE INTO Application (id,  createdTime, updatedTime, name, description, version, workStartedDate, workEndedDate,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?)',
          [
            id,
            createdTime != null ? createdTime.millisecondsSinceEpoch : null,
            updatedTime != null ? updatedTime.millisecondsSinceEpoch : null,
            name,
            description,
            version,
            workStartedDate != null
                ? workStartedDate.millisecondsSinceEpoch
                : null,
            workEndedDate != null ? workEndedDate.millisecondsSinceEpoch : null,
            isDeleted
          ]);
      saveResult = BoolResult(
          success: true,
          successMessage: 'Application id=$id updated successfuly');
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Application Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<Application>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> upsertAll(List<Application> applications) async {
    final results = await _mnApplication.rawInsertAll(
        'INSERT OR REPLACE INTO Application (id,  createdTime, updatedTime, name, description, version, workStartedDate, workEndedDate,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?)',
        applications);
    return results;
  }

  /// Deletes Application

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Application invoked (id=$id)');
    var result = BoolResult();
    {
      result =
          await Project().select().ApplicationId.equals(id).delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete || isDeleted) {
      return _mnApplication
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnApplication.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Application>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover Application invoked (id=$id)');
    var result = BoolResult();
    if (recoverChilds) {
      result = await Project()
          .select(getIsDeleted: true)
          .isDeleted
          .equals(true)
          .and
          .ApplicationId
          .equals(id)
          .update({'isDeleted': 0});
    }
    if (!result.success && recoverChilds) {
      return result;
    }
    {
      return _mnApplication.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  //private ApplicationFilterBuilder _Select;
  ApplicationFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return ApplicationFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  ApplicationFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return ApplicationFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion application

// region ApplicationField
class ApplicationField extends SearchCriteria {
  ApplicationField(this.applicationFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  ApplicationFilterBuilder applicationFB;

  ApplicationField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  ApplicationFilterBuilder equals(var pValue) {
    param.expression = '=';
    applicationFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, applicationFB.parameters, param, SqlSyntax.EQuals,
            applicationFB._addedBlocks)
        : setCriteria(pValue, applicationFB.parameters, param,
            SqlSyntax.NotEQuals, applicationFB._addedBlocks);
    _waitingNot = '';
    applicationFB._addedBlocks.needEndBlock[applicationFB._blockIndex] =
        applicationFB._addedBlocks.retVal;
    return applicationFB;
  }

  ApplicationFilterBuilder equalsOrNull(var pValue) {
    param.expression = '=';
    applicationFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, applicationFB.parameters, param,
            SqlSyntax.EQualsOrNull, applicationFB._addedBlocks)
        : setCriteria(pValue, applicationFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, applicationFB._addedBlocks);
    _waitingNot = '';
    applicationFB._addedBlocks.needEndBlock[applicationFB._blockIndex] =
        applicationFB._addedBlocks.retVal;
    return applicationFB;
  }

  ApplicationFilterBuilder isNull() {
    applicationFB._addedBlocks = setCriteria(
        0,
        applicationFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        applicationFB._addedBlocks);
    _waitingNot = '';
    applicationFB._addedBlocks.needEndBlock[applicationFB._blockIndex] =
        applicationFB._addedBlocks.retVal;
    return applicationFB;
  }

  ApplicationFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      applicationFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          applicationFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          applicationFB._addedBlocks);
      _waitingNot = '';
      applicationFB._addedBlocks.needEndBlock[applicationFB._blockIndex] =
          applicationFB._addedBlocks.retVal;
    }
    return applicationFB;
  }

  ApplicationFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      applicationFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          applicationFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          applicationFB._addedBlocks);
      _waitingNot = '';
      applicationFB._addedBlocks.needEndBlock[applicationFB._blockIndex] =
          applicationFB._addedBlocks.retVal;
      applicationFB._addedBlocks.needEndBlock[applicationFB._blockIndex] =
          applicationFB._addedBlocks.retVal;
    }
    return applicationFB;
  }

  ApplicationFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      applicationFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          applicationFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          applicationFB._addedBlocks);
      _waitingNot = '';
      applicationFB._addedBlocks.needEndBlock[applicationFB._blockIndex] =
          applicationFB._addedBlocks.retVal;
    }
    return applicationFB;
  }

  ApplicationFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      applicationFB._addedBlocks = setCriteria(
          pFirst,
          applicationFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          applicationFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        applicationFB._addedBlocks = setCriteria(
            pFirst,
            applicationFB.parameters,
            param,
            SqlSyntax.LessThan,
            applicationFB._addedBlocks);
      } else {
        applicationFB._addedBlocks = setCriteria(
            pFirst,
            applicationFB.parameters,
            param,
            SqlSyntax.GreaterThanOrEquals,
            applicationFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        applicationFB._addedBlocks = setCriteria(
            pLast,
            applicationFB.parameters,
            param,
            SqlSyntax.GreaterThan,
            applicationFB._addedBlocks);
      } else {
        applicationFB._addedBlocks = setCriteria(
            pLast,
            applicationFB.parameters,
            param,
            SqlSyntax.LessThanOrEquals,
            applicationFB._addedBlocks);
      }
    }
    _waitingNot = '';
    applicationFB._addedBlocks.needEndBlock[applicationFB._blockIndex] =
        applicationFB._addedBlocks.retVal;
    return applicationFB;
  }

  ApplicationFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    applicationFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, applicationFB.parameters, param,
            SqlSyntax.GreaterThan, applicationFB._addedBlocks)
        : setCriteria(pValue, applicationFB.parameters, param,
            SqlSyntax.LessThanOrEquals, applicationFB._addedBlocks);
    _waitingNot = '';
    applicationFB._addedBlocks.needEndBlock[applicationFB._blockIndex] =
        applicationFB._addedBlocks.retVal;
    return applicationFB;
  }

  ApplicationFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    applicationFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, applicationFB.parameters, param,
            SqlSyntax.LessThan, applicationFB._addedBlocks)
        : setCriteria(pValue, applicationFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, applicationFB._addedBlocks);
    _waitingNot = '';
    applicationFB._addedBlocks.needEndBlock[applicationFB._blockIndex] =
        applicationFB._addedBlocks.retVal;
    return applicationFB;
  }

  ApplicationFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    applicationFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, applicationFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, applicationFB._addedBlocks)
        : setCriteria(pValue, applicationFB.parameters, param,
            SqlSyntax.LessThan, applicationFB._addedBlocks);
    _waitingNot = '';
    applicationFB._addedBlocks.needEndBlock[applicationFB._blockIndex] =
        applicationFB._addedBlocks.retVal;
    return applicationFB;
  }

  ApplicationFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    applicationFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, applicationFB.parameters, param,
            SqlSyntax.LessThanOrEquals, applicationFB._addedBlocks)
        : setCriteria(pValue, applicationFB.parameters, param,
            SqlSyntax.GreaterThan, applicationFB._addedBlocks);
    _waitingNot = '';
    applicationFB._addedBlocks.needEndBlock[applicationFB._blockIndex] =
        applicationFB._addedBlocks.retVal;
    return applicationFB;
  }

  ApplicationFilterBuilder inValues(var pValue) {
    applicationFB._addedBlocks = setCriteria(
        pValue,
        applicationFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        applicationFB._addedBlocks);
    _waitingNot = '';
    applicationFB._addedBlocks.needEndBlock[applicationFB._blockIndex] =
        applicationFB._addedBlocks.retVal;
    return applicationFB;
  }
}
// endregion ApplicationField

// region ApplicationFilterBuilder
class ApplicationFilterBuilder extends SearchCriteria {
  ApplicationFilterBuilder(Application obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = List<DbParameter>();
    orderByList = List<String>();
    groupByList = List<String>();
    _addedBlocks = AddedBlocks(List<bool>(), List<bool>());
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Application _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  ApplicationFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  ApplicationFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  ApplicationFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  ApplicationFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter();
      _addedBlocks =
          setCriteria(0, parameters, param, '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  ApplicationFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  /// int count = LIMIT
  ApplicationFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  ApplicationFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  ApplicationFilterBuilder orderBy(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  ApplicationFilterBuilder orderByDesc(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s desc ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  ApplicationFilterBuilder groupBy(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') groupByList.add(' $s ');
        }
      }
    }
    return this;
  }

  ApplicationField setField(
      ApplicationField field, String colName, DbType dbtype) {
    return ApplicationField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  ApplicationField _id;
  ApplicationField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  ApplicationField _createdTime;
  ApplicationField get createdTime {
    return _createdTime =
        setField(_createdTime, 'createdTime', DbType.datetime);
  }

  ApplicationField _updatedTime;
  ApplicationField get updatedTime {
    return _updatedTime =
        setField(_updatedTime, 'updatedTime', DbType.datetime);
  }

  ApplicationField _name;
  ApplicationField get name {
    return _name = setField(_name, 'name', DbType.text);
  }

  ApplicationField _description;
  ApplicationField get description {
    return _description = setField(_description, 'description', DbType.text);
  }

  ApplicationField _version;
  ApplicationField get version {
    return _version = setField(_version, 'version', DbType.text);
  }

  ApplicationField _workStartedDate;
  ApplicationField get workStartedDate {
    return _workStartedDate =
        setField(_workStartedDate, 'workStartedDate', DbType.datetime);
  }

  ApplicationField _workEndedDate;
  ApplicationField get workEndedDate {
    return _workEndedDate =
        setField(_workEndedDate, 'workEndedDate', DbType.datetime);
  }

  ApplicationField _isDeleted;
  ApplicationField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll('[', '')
              .replaceAll(']', '')
              .toString();
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value =
                  param.value == null ? null : param.value == true ? 1 : 0;
              param.value2 =
                  param.value2 == null ? null : param.value2 == true ? 1 : 0;
              break;
            case DbType.date:
            case DbType.datetime:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            whereArguments.add(param.value);
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Application._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',');
  }

  /// Deletes List<Application> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();
    final projectByApplicationIdidList = await toListPrimaryKey(false);
    await Project()
        .select()
        .ApplicationId
        .inValues(projectByApplicationIdidList)
        .delete(hardDelete);

    if (Application._softDeleteActivated && !hardDelete) {
      r = await _obj._mnApplication.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnApplication.delete(qparams);
    }
    return r;
  }

  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover Application bulk invoked');
    final projectByApplicationIdidList = await toListPrimaryKey(false);
    await Project()
        .select(getIsDeleted: true)
        .isDeleted
        .equals(true)
        .and
        .ApplicationId
        .inValues(projectByApplicationIdidList)
        .update({'isDeleted': 0});
    return _obj._mnApplication.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from Application ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnApplication.updateBatch(qparams, values);
  }

  /// This method always returns ApplicationObj if exist, otherwise returns null
  /// <returns>List<Application>
  Future<Application> toSingle(
      [VoidCallback application(Application o)]) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnApplication.toList(qparams);
    final data = await objFuture;
    Application obj;
    if (data.isNotEmpty) {
      obj = Application.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    if (application != null) {
      application(obj);
    }
    return obj;
  }

  /// This method always returns int.
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback applicationCount(int c)]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final applicationsFuture = await _obj._mnApplication.toList(qparams);
    final int count = applicationsFuture[0]['CNT'] as int;
    if (applicationCount != null) {
      applicationCount(count);
    }
    return count;
  }

  /// This method always returns List<Application>.
  /// <returns>List<Application>
  Future<List<Application>> toList(
      [VoidCallback applicationList(List<Application> o)]) async {
    final data = await toMapList();
    final List<Application> applicationsData =
        await Application.fromMapList(data);
    if (applicationList != null) applicationList(applicationsData);
    return applicationsData;
  }

  /// This method always returns Json String
  Future<String> toJson() async {
    final list = List<dynamic>();
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method always returns Json String.
  Future<String> toJsonWithChilds() async {
    final list = List<dynamic>();
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChilds(false, true));
    }
    return json.encode(list);
  }

  /// This method always returns List<dynamic>.
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnApplication.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<Application>>
  Future<List<DropdownMenuItem<Application>>> toDropDownMenu(
      String displayTextColumn,
      [VoidCallback dropDownMenu(
          List<DropdownMenuItem<Application>> o)]) async {
    _buildParameters();
    final applicationsFuture = _obj._mnApplication.toList(qparams);

    final data = await applicationsFuture;
    final int count = data.length;
    final List<DropdownMenuItem<Application>> items = List()
      ..add(DropdownMenuItem(
        value: Application(),
        child: Text('Select Application'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: Application.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback dropDownMenu(List<DropdownMenuItem<int>> o)]) async {
    _buildParameters();
    qparams.selectColumns = ['id', displayTextColumn];
    final applicationsFuture = _obj._mnApplication.toList(qparams);

    final data = await applicationsFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = List()
      ..add(DropdownMenuItem(
        value: 0,
        child: Text('Select Application'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['id'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) _buildParameters();
    final List<int> idData = List<int>();
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnApplication.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject(
      [VoidCallback listObject(List<dynamic> o)]) async {
    _buildParameters();

    final objectFuture = _obj._mnApplication.toList(qparams);

    final List<dynamic> objectsData = List<dynamic>();
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    if (listObject != null) {
      listObject(objectsData);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Application.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback listString(List<String> o)]) async {
    _buildParameters();

    final objectFuture = _obj._mnApplication.toList(qparams);

    final List<String> objectsData = List<String>();
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion ApplicationFilterBuilder

// region ApplicationFields
class ApplicationFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fCreatedTime;
  static TableField get createdTime {
    return _fCreatedTime = _fCreatedTime ??
        SqlSyntax.setField(_fCreatedTime, 'createdTime', DbType.datetime);
  }

  static TableField _fUpdatedTime;
  static TableField get updatedTime {
    return _fUpdatedTime = _fUpdatedTime ??
        SqlSyntax.setField(_fUpdatedTime, 'updatedTime', DbType.datetime);
  }

  static TableField _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField _fDescription;
  static TableField get description {
    return _fDescription = _fDescription ??
        SqlSyntax.setField(_fDescription, 'description', DbType.text);
  }

  static TableField _fVersion;
  static TableField get version {
    return _fVersion =
        _fVersion ?? SqlSyntax.setField(_fVersion, 'version', DbType.text);
  }

  static TableField _fWorkStartedDate;
  static TableField get workStartedDate {
    return _fWorkStartedDate = _fWorkStartedDate ??
        SqlSyntax.setField(
            _fWorkStartedDate, 'workStartedDate', DbType.datetime);
  }

  static TableField _fWorkEndedDate;
  static TableField get workEndedDate {
    return _fWorkEndedDate = _fWorkEndedDate ??
        SqlSyntax.setField(_fWorkEndedDate, 'workEndedDate', DbType.datetime);
  }

  static TableField _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion ApplicationFields

//region ApplicationManager
class ApplicationManager extends SqfEntityProvider {
  ApplicationManager()
      : super(TimeManager(), tableName: _tableName, colId: _colId);
  static String _tableName = 'Application';
  static String _colId = 'id';
}

//endregion ApplicationManager
// region Filter
class Filter {
  Filter(
      {this.id,
      this.createdTime,
      this.updatedTime,
      this.filterXML,
      this.isDefault,
      this.name,
      this.description,
      this.isDeleted}) {
    _setDefaultValues();
  }
  Filter.withFields(this.createdTime, this.updatedTime, this.filterXML,
      this.isDefault, this.name, this.description, this.isDeleted) {
    _setDefaultValues();
  }
  Filter.withId(this.id, this.createdTime, this.updatedTime, this.filterXML,
      this.isDefault, this.name, this.description, this.isDeleted) {
    _setDefaultValues();
  }
  Filter.fromMap(Map<String, dynamic> o) {
    id = o['id'] as int;
    createdTime = o['createdTime'] != null
        ? int.tryParse(o['createdTime'].toString()) != null
            ? DateTime.fromMillisecondsSinceEpoch(o['createdTime'] as int)
            : DateTime.tryParse(o['createdTime'].toString())
        : null;
    updatedTime = o['updatedTime'] != null
        ? int.tryParse(o['updatedTime'].toString()) != null
            ? DateTime.fromMillisecondsSinceEpoch(o['updatedTime'] as int)
            : DateTime.tryParse(o['updatedTime'].toString())
        : null;
    filterXML = o['filterXML'] as String;
    isDefault = o['isDefault'] != null ? o['isDefault'] == 1 : null;
    name = o['name'] as String;
    description = o['description'] as String;
    isDeleted = o['isDeleted'] != null ? o['isDeleted'] == 1 : null;
  }
  // FIELDS (Filter)
  int id;
  DateTime createdTime;
  DateTime updatedTime;
  String filterXML;
  bool isDefault;
  String name;
  String description;
  bool isDeleted;

  BoolResult saveResult;
  // end FIELDS (Filter)

  static const bool _softDeleteActivated = true;
  FilterManager __mnFilter;

  FilterManager get _mnFilter {
    return __mnFilter = __mnFilter ?? FilterManager();
  }

  // METHODS
  Map<String, dynamic> toMap({bool forQuery = false, bool forJson = false}) {
    final map = Map<String, dynamic>();
    if (id != null) {
      map['id'] = id;
    }
    if (createdTime != null) {
      map['createdTime'] = forJson
          ? createdTime.toUtc().toString()
          : forQuery ? createdTime.millisecondsSinceEpoch : createdTime;
    }

    if (updatedTime != null) {
      map['updatedTime'] = forJson
          ? updatedTime.toUtc().toString()
          : forQuery ? updatedTime.millisecondsSinceEpoch : updatedTime;
    }

    if (filterXML != null) {
      map['filterXML'] = filterXML;
    }

    if (isDefault != null) {
      map['isDefault'] = forQuery ? (isDefault ? 1 : 0) : isDefault;
    }

    if (name != null) {
      map['name'] = name;
    }

    if (description != null) {
      map['description'] = description;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChilds(
      [bool forQuery = false, bool forJson = false]) async {
    final map = Map<String, dynamic>();
    if (id != null) {
      map['id'] = id;
    }
    if (createdTime != null) {
      map['createdTime'] = forJson
          ? createdTime.toUtc().toString()
          : forQuery ? createdTime.millisecondsSinceEpoch : createdTime;
    }

    if (updatedTime != null) {
      map['updatedTime'] = forJson
          ? updatedTime.toUtc().toString()
          : forQuery ? updatedTime.millisecondsSinceEpoch : updatedTime;
    }

    if (filterXML != null) {
      map['filterXML'] = filterXML;
    }

    if (isDefault != null) {
      map['isDefault'] = forQuery ? (isDefault ? 1 : 0) : isDefault;
    }

    if (name != null) {
      map['name'] = name;
    }

    if (description != null) {
      map['description'] = description;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method always returns Json String
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method always returns Json String
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChilds(false, true));
  }

  List<dynamic> toArgs() {
    return [
      id,
      createdTime != null ? createdTime.millisecondsSinceEpoch : null,
      updatedTime != null ? updatedTime.millisecondsSinceEpoch : null,
      filterXML,
      isDefault,
      name,
      description,
      isDeleted
    ];
  }

  static Future<List<Filter>> fromWebUrl(String url) async {
    try {
      final response = await http.get(url);
      return await fromJson(response.body);
    } catch (e) {
      print('SQFENTITY ERROR Filter.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  static Future<List<Filter>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = List<Filter>();
    try {
      objList = list
          .map((filter) => Filter.fromMap(filter as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR Filter.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Filter>> fromObjectList(Future<List<dynamic>> o) async {
    final data = await o;
    return await Filter.fromMapList(data);
  }

  static Future<List<Filter>> fromMapList(List<dynamic> data) async {
    final List<Filter> objList = List<Filter>();
    for (final Map map in data as List<Map>) {
      final obj = Filter.fromMap(map as Map<String, dynamic>);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Filter by ID if exist, otherwise returns null
  /// <param name='id'>Primary Key Value</param>
  /// <returns>returns Filter if exist, otherwise returns null
  Future<Filter> getById(int id) async {
    if (id == null) {
      return null;
    }
    Filter obj;
    final data = await _mnFilter.getById(id);
    if (data.length != 0) {
      obj = Filter.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0) {
      id = await _mnFilter.insert(this);
    } else {
      id = await _upsert();
    }

    return id;
  }

  /// saveAs Filter. Returns a new Primary Key value of Filter

  /// <returns>Returns a new Primary Key value of Filter
  Future<int> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<Filter> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> saveAll(List<Filter> filters) async {
    final results = _mnFilter.saveAll(
        'INSERT OR REPLACE INTO Filter (id,  createdTime, updatedTime, filterXML, isDefault, name, description,isDeleted)  VALUES (?,?,?,?,?,?,?,?)',
        filters);
    return results;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> _upsert() async {
    try {
      id = await _mnFilter.rawInsert(
          'INSERT OR REPLACE INTO Filter (id,  createdTime, updatedTime, filterXML, isDefault, name, description,isDeleted)  VALUES (?,?,?,?,?,?,?,?)',
          [
            id,
            createdTime != null ? createdTime.millisecondsSinceEpoch : null,
            updatedTime != null ? updatedTime.millisecondsSinceEpoch : null,
            filterXML,
            isDefault,
            name,
            description,
            isDeleted
          ]);
      saveResult = BoolResult(
          success: true, successMessage: 'Filter id=$id updated successfuly');
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Filter Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<Filter>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> upsertAll(List<Filter> filters) async {
    final results = await _mnFilter.rawInsertAll(
        'INSERT OR REPLACE INTO Filter (id,  createdTime, updatedTime, filterXML, isDefault, name, description,isDeleted)  VALUES (?,?,?,?,?,?,?,?)',
        filters);
    return results;
  }

  /// Deletes Filter

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Filter invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted) {
      return _mnFilter
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnFilter.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Filter>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover Filter invoked (id=$id)');
    {
      return _mnFilter.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  //private FilterFilterBuilder _Select;
  FilterFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return FilterFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  FilterFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return FilterFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion filter

// region FilterField
class FilterField extends SearchCriteria {
  FilterField(this.filterFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  FilterFilterBuilder filterFB;

  FilterField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  FilterFilterBuilder equals(var pValue) {
    param.expression = '=';
    filterFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, filterFB.parameters, param, SqlSyntax.EQuals,
            filterFB._addedBlocks)
        : setCriteria(pValue, filterFB.parameters, param, SqlSyntax.NotEQuals,
            filterFB._addedBlocks);
    _waitingNot = '';
    filterFB._addedBlocks.needEndBlock[filterFB._blockIndex] =
        filterFB._addedBlocks.retVal;
    return filterFB;
  }

  FilterFilterBuilder equalsOrNull(var pValue) {
    param.expression = '=';
    filterFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, filterFB.parameters, param,
            SqlSyntax.EQualsOrNull, filterFB._addedBlocks)
        : setCriteria(pValue, filterFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, filterFB._addedBlocks);
    _waitingNot = '';
    filterFB._addedBlocks.needEndBlock[filterFB._blockIndex] =
        filterFB._addedBlocks.retVal;
    return filterFB;
  }

  FilterFilterBuilder isNull() {
    filterFB._addedBlocks = setCriteria(
        0,
        filterFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        filterFB._addedBlocks);
    _waitingNot = '';
    filterFB._addedBlocks.needEndBlock[filterFB._blockIndex] =
        filterFB._addedBlocks.retVal;
    return filterFB;
  }

  FilterFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      filterFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          filterFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          filterFB._addedBlocks);
      _waitingNot = '';
      filterFB._addedBlocks.needEndBlock[filterFB._blockIndex] =
          filterFB._addedBlocks.retVal;
    }
    return filterFB;
  }

  FilterFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      filterFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          filterFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          filterFB._addedBlocks);
      _waitingNot = '';
      filterFB._addedBlocks.needEndBlock[filterFB._blockIndex] =
          filterFB._addedBlocks.retVal;
      filterFB._addedBlocks.needEndBlock[filterFB._blockIndex] =
          filterFB._addedBlocks.retVal;
    }
    return filterFB;
  }

  FilterFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      filterFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          filterFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          filterFB._addedBlocks);
      _waitingNot = '';
      filterFB._addedBlocks.needEndBlock[filterFB._blockIndex] =
          filterFB._addedBlocks.retVal;
    }
    return filterFB;
  }

  FilterFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      filterFB._addedBlocks = setCriteria(
          pFirst,
          filterFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          filterFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        filterFB._addedBlocks = setCriteria(pFirst, filterFB.parameters, param,
            SqlSyntax.LessThan, filterFB._addedBlocks);
      } else {
        filterFB._addedBlocks = setCriteria(pFirst, filterFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, filterFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        filterFB._addedBlocks = setCriteria(pLast, filterFB.parameters, param,
            SqlSyntax.GreaterThan, filterFB._addedBlocks);
      } else {
        filterFB._addedBlocks = setCriteria(pLast, filterFB.parameters, param,
            SqlSyntax.LessThanOrEquals, filterFB._addedBlocks);
      }
    }
    _waitingNot = '';
    filterFB._addedBlocks.needEndBlock[filterFB._blockIndex] =
        filterFB._addedBlocks.retVal;
    return filterFB;
  }

  FilterFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    filterFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, filterFB.parameters, param, SqlSyntax.GreaterThan,
            filterFB._addedBlocks)
        : setCriteria(pValue, filterFB.parameters, param,
            SqlSyntax.LessThanOrEquals, filterFB._addedBlocks);
    _waitingNot = '';
    filterFB._addedBlocks.needEndBlock[filterFB._blockIndex] =
        filterFB._addedBlocks.retVal;
    return filterFB;
  }

  FilterFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    filterFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, filterFB.parameters, param, SqlSyntax.LessThan,
            filterFB._addedBlocks)
        : setCriteria(pValue, filterFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, filterFB._addedBlocks);
    _waitingNot = '';
    filterFB._addedBlocks.needEndBlock[filterFB._blockIndex] =
        filterFB._addedBlocks.retVal;
    return filterFB;
  }

  FilterFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    filterFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, filterFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, filterFB._addedBlocks)
        : setCriteria(pValue, filterFB.parameters, param, SqlSyntax.LessThan,
            filterFB._addedBlocks);
    _waitingNot = '';
    filterFB._addedBlocks.needEndBlock[filterFB._blockIndex] =
        filterFB._addedBlocks.retVal;
    return filterFB;
  }

  FilterFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    filterFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, filterFB.parameters, param,
            SqlSyntax.LessThanOrEquals, filterFB._addedBlocks)
        : setCriteria(pValue, filterFB.parameters, param, SqlSyntax.GreaterThan,
            filterFB._addedBlocks);
    _waitingNot = '';
    filterFB._addedBlocks.needEndBlock[filterFB._blockIndex] =
        filterFB._addedBlocks.retVal;
    return filterFB;
  }

  FilterFilterBuilder inValues(var pValue) {
    filterFB._addedBlocks = setCriteria(
        pValue,
        filterFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        filterFB._addedBlocks);
    _waitingNot = '';
    filterFB._addedBlocks.needEndBlock[filterFB._blockIndex] =
        filterFB._addedBlocks.retVal;
    return filterFB;
  }
}
// endregion FilterField

// region FilterFilterBuilder
class FilterFilterBuilder extends SearchCriteria {
  FilterFilterBuilder(Filter obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = List<DbParameter>();
    orderByList = List<String>();
    groupByList = List<String>();
    _addedBlocks = AddedBlocks(List<bool>(), List<bool>());
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Filter _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  FilterFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  FilterFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  FilterFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  FilterFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter();
      _addedBlocks =
          setCriteria(0, parameters, param, '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  FilterFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  /// int count = LIMIT
  FilterFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  FilterFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  FilterFilterBuilder orderBy(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  FilterFilterBuilder orderByDesc(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s desc ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  FilterFilterBuilder groupBy(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') groupByList.add(' $s ');
        }
      }
    }
    return this;
  }

  FilterField setField(FilterField field, String colName, DbType dbtype) {
    return FilterField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  FilterField _id;
  FilterField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  FilterField _createdTime;
  FilterField get createdTime {
    return _createdTime =
        setField(_createdTime, 'createdTime', DbType.datetime);
  }

  FilterField _updatedTime;
  FilterField get updatedTime {
    return _updatedTime =
        setField(_updatedTime, 'updatedTime', DbType.datetime);
  }

  FilterField _filterXML;
  FilterField get filterXML {
    return _filterXML = setField(_filterXML, 'filterXML', DbType.text);
  }

  FilterField _isDefault;
  FilterField get isDefault {
    return _isDefault = setField(_isDefault, 'isDefault', DbType.bool);
  }

  FilterField _name;
  FilterField get name {
    return _name = setField(_name, 'name', DbType.text);
  }

  FilterField _description;
  FilterField get description {
    return _description = setField(_description, 'description', DbType.text);
  }

  FilterField _isDeleted;
  FilterField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll('[', '')
              .replaceAll(']', '')
              .toString();
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value =
                  param.value == null ? null : param.value == true ? 1 : 0;
              param.value2 =
                  param.value2 == null ? null : param.value2 == true ? 1 : 0;
              break;
            case DbType.date:
            case DbType.datetime:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            whereArguments.add(param.value);
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Filter._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',');
  }

  /// Deletes List<Filter> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();
    if (Filter._softDeleteActivated && !hardDelete) {
      r = await _obj._mnFilter.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnFilter.delete(qparams);
    }
    return r;
  }

  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover Filter bulk invoked');
    return _obj._mnFilter.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from Filter ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnFilter.updateBatch(qparams, values);
  }

  /// This method always returns FilterObj if exist, otherwise returns null
  /// <returns>List<Filter>
  Future<Filter> toSingle([VoidCallback filter(Filter o)]) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnFilter.toList(qparams);
    final data = await objFuture;
    Filter obj;
    if (data.isNotEmpty) {
      obj = Filter.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    if (filter != null) {
      filter(obj);
    }
    return obj;
  }

  /// This method always returns int.
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback filterCount(int c)]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final filtersFuture = await _obj._mnFilter.toList(qparams);
    final int count = filtersFuture[0]['CNT'] as int;
    if (filterCount != null) {
      filterCount(count);
    }
    return count;
  }

  /// This method always returns List<Filter>.
  /// <returns>List<Filter>
  Future<List<Filter>> toList([VoidCallback filterList(List<Filter> o)]) async {
    final data = await toMapList();
    final List<Filter> filtersData = await Filter.fromMapList(data);
    if (filterList != null) filterList(filtersData);
    return filtersData;
  }

  /// This method always returns Json String
  Future<String> toJson() async {
    final list = List<dynamic>();
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method always returns Json String.
  Future<String> toJsonWithChilds() async {
    final list = List<dynamic>();
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChilds(false, true));
    }
    return json.encode(list);
  }

  /// This method always returns List<dynamic>.
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnFilter.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<Filter>>
  Future<List<DropdownMenuItem<Filter>>> toDropDownMenu(
      String displayTextColumn,
      [VoidCallback dropDownMenu(List<DropdownMenuItem<Filter>> o)]) async {
    _buildParameters();
    final filtersFuture = _obj._mnFilter.toList(qparams);

    final data = await filtersFuture;
    final int count = data.length;
    final List<DropdownMenuItem<Filter>> items = List()
      ..add(DropdownMenuItem(
        value: Filter(),
        child: Text('Select Filter'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: Filter.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback dropDownMenu(List<DropdownMenuItem<int>> o)]) async {
    _buildParameters();
    qparams.selectColumns = ['id', displayTextColumn];
    final filtersFuture = _obj._mnFilter.toList(qparams);

    final data = await filtersFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = List()
      ..add(DropdownMenuItem(
        value: 0,
        child: Text('Select Filter'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['id'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) _buildParameters();
    final List<int> idData = List<int>();
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnFilter.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject(
      [VoidCallback listObject(List<dynamic> o)]) async {
    _buildParameters();

    final objectFuture = _obj._mnFilter.toList(qparams);

    final List<dynamic> objectsData = List<dynamic>();
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    if (listObject != null) {
      listObject(objectsData);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Filter.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback listString(List<String> o)]) async {
    _buildParameters();

    final objectFuture = _obj._mnFilter.toList(qparams);

    final List<String> objectsData = List<String>();
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion FilterFilterBuilder

// region FilterFields
class FilterFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fCreatedTime;
  static TableField get createdTime {
    return _fCreatedTime = _fCreatedTime ??
        SqlSyntax.setField(_fCreatedTime, 'createdTime', DbType.datetime);
  }

  static TableField _fUpdatedTime;
  static TableField get updatedTime {
    return _fUpdatedTime = _fUpdatedTime ??
        SqlSyntax.setField(_fUpdatedTime, 'updatedTime', DbType.datetime);
  }

  static TableField _fFilterXML;
  static TableField get filterXML {
    return _fFilterXML = _fFilterXML ??
        SqlSyntax.setField(_fFilterXML, 'filterXML', DbType.text);
  }

  static TableField _fIsDefault;
  static TableField get isDefault {
    return _fIsDefault = _fIsDefault ??
        SqlSyntax.setField(_fIsDefault, 'isDefault', DbType.bool);
  }

  static TableField _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField _fDescription;
  static TableField get description {
    return _fDescription = _fDescription ??
        SqlSyntax.setField(_fDescription, 'description', DbType.text);
  }

  static TableField _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion FilterFields

//region FilterManager
class FilterManager extends SqfEntityProvider {
  FilterManager() : super(TimeManager(), tableName: _tableName, colId: _colId);
  static String _tableName = 'Filter';
  static String _colId = 'id';
}

//endregion FilterManager
// region ProjectType
class ProjectType {
  ProjectType(
      {this.id,
      this.createdTime,
      this.updatedTime,
      this.name,
      this.description,
      this.isDeleted}) {
    _setDefaultValues();
  }
  ProjectType.withFields(this.createdTime, this.updatedTime, this.name,
      this.description, this.isDeleted) {
    _setDefaultValues();
  }
  ProjectType.withId(this.id, this.createdTime, this.updatedTime, this.name,
      this.description, this.isDeleted) {
    _setDefaultValues();
  }
  ProjectType.fromMap(Map<String, dynamic> o) {
    id = o['id'] as int;
    createdTime = o['createdTime'] != null
        ? int.tryParse(o['createdTime'].toString()) != null
            ? DateTime.fromMillisecondsSinceEpoch(o['createdTime'] as int)
            : DateTime.tryParse(o['createdTime'].toString())
        : null;
    updatedTime = o['updatedTime'] != null
        ? int.tryParse(o['updatedTime'].toString()) != null
            ? DateTime.fromMillisecondsSinceEpoch(o['updatedTime'] as int)
            : DateTime.tryParse(o['updatedTime'].toString())
        : null;
    name = o['name'] as String;
    description = o['description'] as String;
    isDeleted = o['isDeleted'] != null ? o['isDeleted'] == 1 : null;
  }
  // FIELDS (ProjectType)
  int id;
  DateTime createdTime;
  DateTime updatedTime;
  String name;
  String description;
  bool isDeleted;

  BoolResult saveResult;
  // end FIELDS (ProjectType)

// COLLECTIONS (ProjectType)
  /// get Project(s) filtered by ProjectTypeId=id
  ProjectFilterBuilder getProjects(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return Project()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .ProjectTypeId
        .equals(id)
        .and;
  }
// END COLLECTIONS (ProjectType)

  static const bool _softDeleteActivated = true;
  ProjectTypeManager __mnProjectType;

  ProjectTypeManager get _mnProjectType {
    return __mnProjectType = __mnProjectType ?? ProjectTypeManager();
  }

  // METHODS
  Map<String, dynamic> toMap({bool forQuery = false, bool forJson = false}) {
    final map = Map<String, dynamic>();
    if (id != null) {
      map['id'] = id;
    }
    if (createdTime != null) {
      map['createdTime'] = forJson
          ? createdTime.toUtc().toString()
          : forQuery ? createdTime.millisecondsSinceEpoch : createdTime;
    }

    if (updatedTime != null) {
      map['updatedTime'] = forJson
          ? updatedTime.toUtc().toString()
          : forQuery ? updatedTime.millisecondsSinceEpoch : updatedTime;
    }

    if (name != null) {
      map['name'] = name;
    }

    if (description != null) {
      map['description'] = description;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChilds(
      [bool forQuery = false, bool forJson = false]) async {
    final map = Map<String, dynamic>();
    if (id != null) {
      map['id'] = id;
    }
    if (createdTime != null) {
      map['createdTime'] = forJson
          ? createdTime.toUtc().toString()
          : forQuery ? createdTime.millisecondsSinceEpoch : createdTime;
    }

    if (updatedTime != null) {
      map['updatedTime'] = forJson
          ? updatedTime.toUtc().toString()
          : forQuery ? updatedTime.millisecondsSinceEpoch : updatedTime;
    }

    if (name != null) {
      map['name'] = name;
    }

    if (description != null) {
      map['description'] = description;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

// COLLECTIONS (ProjectType)
    if (!forQuery) {
      map['Projects'] = await getProjects().toMapList();
    }
// END COLLECTIONS (ProjectType)

    return map;
  }

  /// This method always returns Json String
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method always returns Json String
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChilds(false, true));
  }

  List<dynamic> toArgs() {
    return [
      id,
      createdTime != null ? createdTime.millisecondsSinceEpoch : null,
      updatedTime != null ? updatedTime.millisecondsSinceEpoch : null,
      name,
      description,
      isDeleted
    ];
  }

  static Future<List<ProjectType>> fromWebUrl(String url) async {
    try {
      final response = await http.get(url);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR ProjectType.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  static Future<List<ProjectType>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = List<ProjectType>();
    try {
      objList = list
          .map((projecttype) =>
              ProjectType.fromMap(projecttype as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR ProjectType.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<ProjectType>> fromObjectList(
      Future<List<dynamic>> o) async {
    final data = await o;
    return await ProjectType.fromMapList(data);
  }

  static Future<List<ProjectType>> fromMapList(List<dynamic> data) async {
    final List<ProjectType> objList = List<ProjectType>();
    for (final Map map in data as List<Map>) {
      final obj = ProjectType.fromMap(map as Map<String, dynamic>);

      objList.add(obj);
    }
    return objList;
  }

  /// returns ProjectType by ID if exist, otherwise returns null
  /// <param name='id'>Primary Key Value</param>
  /// <returns>returns ProjectType if exist, otherwise returns null
  Future<ProjectType> getById(int id) async {
    if (id == null) {
      return null;
    }
    ProjectType obj;
    final data = await _mnProjectType.getById(id);
    if (data.length != 0) {
      obj = ProjectType.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0) {
      id = await _mnProjectType.insert(this);
    } else {
      id = await _upsert();
    }

    return id;
  }

  /// saveAs ProjectType. Returns a new Primary Key value of ProjectType

  /// <returns>Returns a new Primary Key value of ProjectType
  Future<int> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<ProjectType> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> saveAll(List<ProjectType> projecttypes) async {
    final results = _mnProjectType.saveAll(
        'INSERT OR REPLACE INTO ProjectType (id,  createdTime, updatedTime, name, description,isDeleted)  VALUES (?,?,?,?,?,?)',
        projecttypes);
    return results;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> _upsert() async {
    try {
      id = await _mnProjectType.rawInsert(
          'INSERT OR REPLACE INTO ProjectType (id,  createdTime, updatedTime, name, description,isDeleted)  VALUES (?,?,?,?,?,?)',
          [
            id,
            createdTime != null ? createdTime.millisecondsSinceEpoch : null,
            updatedTime != null ? updatedTime.millisecondsSinceEpoch : null,
            name,
            description,
            isDeleted
          ]);
      saveResult = BoolResult(
          success: true,
          successMessage: 'ProjectType id=$id updated successfuly');
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'ProjectType Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<ProjectType>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> upsertAll(List<ProjectType> projecttypes) async {
    final results = await _mnProjectType.rawInsertAll(
        'INSERT OR REPLACE INTO ProjectType (id,  createdTime, updatedTime, name, description,isDeleted)  VALUES (?,?,?,?,?,?)',
        projecttypes);
    return results;
  }

  /// Deletes ProjectType

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete ProjectType invoked (id=$id)');
    var result = BoolResult();
    {
      result = await Project()
          .select()
          .ProjectTypeId
          .equals(id)
          .update({"ProjectTypeId": null});
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete || isDeleted) {
      return _mnProjectType
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnProjectType.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover ProjectType>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover ProjectType invoked (id=$id)');
    {
      return _mnProjectType.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  //private ProjectTypeFilterBuilder _Select;
  ProjectTypeFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return ProjectTypeFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  ProjectTypeFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return ProjectTypeFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion projecttype

// region ProjectTypeField
class ProjectTypeField extends SearchCriteria {
  ProjectTypeField(this.projecttypeFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  ProjectTypeFilterBuilder projecttypeFB;

  ProjectTypeField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  ProjectTypeFilterBuilder equals(var pValue) {
    param.expression = '=';
    projecttypeFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, projecttypeFB.parameters, param, SqlSyntax.EQuals,
            projecttypeFB._addedBlocks)
        : setCriteria(pValue, projecttypeFB.parameters, param,
            SqlSyntax.NotEQuals, projecttypeFB._addedBlocks);
    _waitingNot = '';
    projecttypeFB._addedBlocks.needEndBlock[projecttypeFB._blockIndex] =
        projecttypeFB._addedBlocks.retVal;
    return projecttypeFB;
  }

  ProjectTypeFilterBuilder equalsOrNull(var pValue) {
    param.expression = '=';
    projecttypeFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, projecttypeFB.parameters, param,
            SqlSyntax.EQualsOrNull, projecttypeFB._addedBlocks)
        : setCriteria(pValue, projecttypeFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, projecttypeFB._addedBlocks);
    _waitingNot = '';
    projecttypeFB._addedBlocks.needEndBlock[projecttypeFB._blockIndex] =
        projecttypeFB._addedBlocks.retVal;
    return projecttypeFB;
  }

  ProjectTypeFilterBuilder isNull() {
    projecttypeFB._addedBlocks = setCriteria(
        0,
        projecttypeFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        projecttypeFB._addedBlocks);
    _waitingNot = '';
    projecttypeFB._addedBlocks.needEndBlock[projecttypeFB._blockIndex] =
        projecttypeFB._addedBlocks.retVal;
    return projecttypeFB;
  }

  ProjectTypeFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      projecttypeFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          projecttypeFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          projecttypeFB._addedBlocks);
      _waitingNot = '';
      projecttypeFB._addedBlocks.needEndBlock[projecttypeFB._blockIndex] =
          projecttypeFB._addedBlocks.retVal;
    }
    return projecttypeFB;
  }

  ProjectTypeFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      projecttypeFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          projecttypeFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          projecttypeFB._addedBlocks);
      _waitingNot = '';
      projecttypeFB._addedBlocks.needEndBlock[projecttypeFB._blockIndex] =
          projecttypeFB._addedBlocks.retVal;
      projecttypeFB._addedBlocks.needEndBlock[projecttypeFB._blockIndex] =
          projecttypeFB._addedBlocks.retVal;
    }
    return projecttypeFB;
  }

  ProjectTypeFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      projecttypeFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          projecttypeFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          projecttypeFB._addedBlocks);
      _waitingNot = '';
      projecttypeFB._addedBlocks.needEndBlock[projecttypeFB._blockIndex] =
          projecttypeFB._addedBlocks.retVal;
    }
    return projecttypeFB;
  }

  ProjectTypeFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      projecttypeFB._addedBlocks = setCriteria(
          pFirst,
          projecttypeFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          projecttypeFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        projecttypeFB._addedBlocks = setCriteria(
            pFirst,
            projecttypeFB.parameters,
            param,
            SqlSyntax.LessThan,
            projecttypeFB._addedBlocks);
      } else {
        projecttypeFB._addedBlocks = setCriteria(
            pFirst,
            projecttypeFB.parameters,
            param,
            SqlSyntax.GreaterThanOrEquals,
            projecttypeFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        projecttypeFB._addedBlocks = setCriteria(
            pLast,
            projecttypeFB.parameters,
            param,
            SqlSyntax.GreaterThan,
            projecttypeFB._addedBlocks);
      } else {
        projecttypeFB._addedBlocks = setCriteria(
            pLast,
            projecttypeFB.parameters,
            param,
            SqlSyntax.LessThanOrEquals,
            projecttypeFB._addedBlocks);
      }
    }
    _waitingNot = '';
    projecttypeFB._addedBlocks.needEndBlock[projecttypeFB._blockIndex] =
        projecttypeFB._addedBlocks.retVal;
    return projecttypeFB;
  }

  ProjectTypeFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    projecttypeFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, projecttypeFB.parameters, param,
            SqlSyntax.GreaterThan, projecttypeFB._addedBlocks)
        : setCriteria(pValue, projecttypeFB.parameters, param,
            SqlSyntax.LessThanOrEquals, projecttypeFB._addedBlocks);
    _waitingNot = '';
    projecttypeFB._addedBlocks.needEndBlock[projecttypeFB._blockIndex] =
        projecttypeFB._addedBlocks.retVal;
    return projecttypeFB;
  }

  ProjectTypeFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    projecttypeFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, projecttypeFB.parameters, param,
            SqlSyntax.LessThan, projecttypeFB._addedBlocks)
        : setCriteria(pValue, projecttypeFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, projecttypeFB._addedBlocks);
    _waitingNot = '';
    projecttypeFB._addedBlocks.needEndBlock[projecttypeFB._blockIndex] =
        projecttypeFB._addedBlocks.retVal;
    return projecttypeFB;
  }

  ProjectTypeFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    projecttypeFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, projecttypeFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, projecttypeFB._addedBlocks)
        : setCriteria(pValue, projecttypeFB.parameters, param,
            SqlSyntax.LessThan, projecttypeFB._addedBlocks);
    _waitingNot = '';
    projecttypeFB._addedBlocks.needEndBlock[projecttypeFB._blockIndex] =
        projecttypeFB._addedBlocks.retVal;
    return projecttypeFB;
  }

  ProjectTypeFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    projecttypeFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, projecttypeFB.parameters, param,
            SqlSyntax.LessThanOrEquals, projecttypeFB._addedBlocks)
        : setCriteria(pValue, projecttypeFB.parameters, param,
            SqlSyntax.GreaterThan, projecttypeFB._addedBlocks);
    _waitingNot = '';
    projecttypeFB._addedBlocks.needEndBlock[projecttypeFB._blockIndex] =
        projecttypeFB._addedBlocks.retVal;
    return projecttypeFB;
  }

  ProjectTypeFilterBuilder inValues(var pValue) {
    projecttypeFB._addedBlocks = setCriteria(
        pValue,
        projecttypeFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        projecttypeFB._addedBlocks);
    _waitingNot = '';
    projecttypeFB._addedBlocks.needEndBlock[projecttypeFB._blockIndex] =
        projecttypeFB._addedBlocks.retVal;
    return projecttypeFB;
  }
}
// endregion ProjectTypeField

// region ProjectTypeFilterBuilder
class ProjectTypeFilterBuilder extends SearchCriteria {
  ProjectTypeFilterBuilder(ProjectType obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = List<DbParameter>();
    orderByList = List<String>();
    groupByList = List<String>();
    _addedBlocks = AddedBlocks(List<bool>(), List<bool>());
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  ProjectType _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  ProjectTypeFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  ProjectTypeFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  ProjectTypeFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  ProjectTypeFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter();
      _addedBlocks =
          setCriteria(0, parameters, param, '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  ProjectTypeFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  /// int count = LIMIT
  ProjectTypeFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  ProjectTypeFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  ProjectTypeFilterBuilder orderBy(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  ProjectTypeFilterBuilder orderByDesc(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s desc ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  ProjectTypeFilterBuilder groupBy(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') groupByList.add(' $s ');
        }
      }
    }
    return this;
  }

  ProjectTypeField setField(
      ProjectTypeField field, String colName, DbType dbtype) {
    return ProjectTypeField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  ProjectTypeField _id;
  ProjectTypeField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  ProjectTypeField _createdTime;
  ProjectTypeField get createdTime {
    return _createdTime =
        setField(_createdTime, 'createdTime', DbType.datetime);
  }

  ProjectTypeField _updatedTime;
  ProjectTypeField get updatedTime {
    return _updatedTime =
        setField(_updatedTime, 'updatedTime', DbType.datetime);
  }

  ProjectTypeField _name;
  ProjectTypeField get name {
    return _name = setField(_name, 'name', DbType.text);
  }

  ProjectTypeField _description;
  ProjectTypeField get description {
    return _description = setField(_description, 'description', DbType.text);
  }

  ProjectTypeField _isDeleted;
  ProjectTypeField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll('[', '')
              .replaceAll(']', '')
              .toString();
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value =
                  param.value == null ? null : param.value == true ? 1 : 0;
              param.value2 =
                  param.value2 == null ? null : param.value2 == true ? 1 : 0;
              break;
            case DbType.date:
            case DbType.datetime:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            whereArguments.add(param.value);
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (ProjectType._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',');
  }

  /// Deletes List<ProjectType> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();
    if (ProjectType._softDeleteActivated && !hardDelete) {
      r = await _obj._mnProjectType.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnProjectType.delete(qparams);
    }
    return r;
  }

  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover ProjectType bulk invoked');
    return _obj._mnProjectType.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from ProjectType ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnProjectType.updateBatch(qparams, values);
  }

  /// This method always returns ProjectTypeObj if exist, otherwise returns null
  /// <returns>List<ProjectType>
  Future<ProjectType> toSingle(
      [VoidCallback projecttype(ProjectType o)]) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnProjectType.toList(qparams);
    final data = await objFuture;
    ProjectType obj;
    if (data.isNotEmpty) {
      obj = ProjectType.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    if (projecttype != null) {
      projecttype(obj);
    }
    return obj;
  }

  /// This method always returns int.
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback projecttypeCount(int c)]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final projecttypesFuture = await _obj._mnProjectType.toList(qparams);
    final int count = projecttypesFuture[0]['CNT'] as int;
    if (projecttypeCount != null) {
      projecttypeCount(count);
    }
    return count;
  }

  /// This method always returns List<ProjectType>.
  /// <returns>List<ProjectType>
  Future<List<ProjectType>> toList(
      [VoidCallback projecttypeList(List<ProjectType> o)]) async {
    final data = await toMapList();
    final List<ProjectType> projecttypesData =
        await ProjectType.fromMapList(data);
    if (projecttypeList != null) projecttypeList(projecttypesData);
    return projecttypesData;
  }

  /// This method always returns Json String
  Future<String> toJson() async {
    final list = List<dynamic>();
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method always returns Json String.
  Future<String> toJsonWithChilds() async {
    final list = List<dynamic>();
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChilds(false, true));
    }
    return json.encode(list);
  }

  /// This method always returns List<dynamic>.
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnProjectType.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<ProjectType>>
  Future<List<DropdownMenuItem<ProjectType>>> toDropDownMenu(
      String displayTextColumn,
      [VoidCallback dropDownMenu(
          List<DropdownMenuItem<ProjectType>> o)]) async {
    _buildParameters();
    final projecttypesFuture = _obj._mnProjectType.toList(qparams);

    final data = await projecttypesFuture;
    final int count = data.length;
    final List<DropdownMenuItem<ProjectType>> items = List()
      ..add(DropdownMenuItem(
        value: ProjectType(),
        child: Text('Select ProjectType'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: ProjectType.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback dropDownMenu(List<DropdownMenuItem<int>> o)]) async {
    _buildParameters();
    qparams.selectColumns = ['id', displayTextColumn];
    final projecttypesFuture = _obj._mnProjectType.toList(qparams);

    final data = await projecttypesFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = List()
      ..add(DropdownMenuItem(
        value: 0,
        child: Text('Select ProjectType'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['id'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) _buildParameters();
    final List<int> idData = List<int>();
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnProjectType.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject(
      [VoidCallback listObject(List<dynamic> o)]) async {
    _buildParameters();

    final objectFuture = _obj._mnProjectType.toList(qparams);

    final List<dynamic> objectsData = List<dynamic>();
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    if (listObject != null) {
      listObject(objectsData);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await ProjectType.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback listString(List<String> o)]) async {
    _buildParameters();

    final objectFuture = _obj._mnProjectType.toList(qparams);

    final List<String> objectsData = List<String>();
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion ProjectTypeFilterBuilder

// region ProjectTypeFields
class ProjectTypeFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fCreatedTime;
  static TableField get createdTime {
    return _fCreatedTime = _fCreatedTime ??
        SqlSyntax.setField(_fCreatedTime, 'createdTime', DbType.datetime);
  }

  static TableField _fUpdatedTime;
  static TableField get updatedTime {
    return _fUpdatedTime = _fUpdatedTime ??
        SqlSyntax.setField(_fUpdatedTime, 'updatedTime', DbType.datetime);
  }

  static TableField _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField _fDescription;
  static TableField get description {
    return _fDescription = _fDescription ??
        SqlSyntax.setField(_fDescription, 'description', DbType.text);
  }

  static TableField _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion ProjectTypeFields

//region ProjectTypeManager
class ProjectTypeManager extends SqfEntityProvider {
  ProjectTypeManager()
      : super(TimeManager(), tableName: _tableName, colId: _colId);
  static String _tableName = 'ProjectType';
  static String _colId = 'id';
}

//endregion ProjectTypeManager
// region Setting
class Setting {
  Setting({this.id, this.createdTime, this.updatedTime, this.isDeleted}) {
    _setDefaultValues();
  }
  Setting.withFields(this.createdTime, this.updatedTime, this.isDeleted) {
    _setDefaultValues();
  }
  Setting.withId(this.id, this.createdTime, this.updatedTime, this.isDeleted) {
    _setDefaultValues();
  }
  Setting.fromMap(Map<String, dynamic> o) {
    id = o['id'] as int;
    createdTime = o['createdTime'] != null
        ? int.tryParse(o['createdTime'].toString()) != null
            ? DateTime.fromMillisecondsSinceEpoch(o['createdTime'] as int)
            : DateTime.tryParse(o['createdTime'].toString())
        : null;
    updatedTime = o['updatedTime'] != null
        ? int.tryParse(o['updatedTime'].toString()) != null
            ? DateTime.fromMillisecondsSinceEpoch(o['updatedTime'] as int)
            : DateTime.tryParse(o['updatedTime'].toString())
        : null;
    isDeleted = o['isDeleted'] != null ? o['isDeleted'] == 1 : null;
  }
  // FIELDS (Setting)
  int id;
  DateTime createdTime;
  DateTime updatedTime;
  bool isDeleted;

  BoolResult saveResult;
  // end FIELDS (Setting)

  static const bool _softDeleteActivated = true;
  SettingManager __mnSetting;

  SettingManager get _mnSetting {
    return __mnSetting = __mnSetting ?? SettingManager();
  }

  // METHODS
  Map<String, dynamic> toMap({bool forQuery = false, bool forJson = false}) {
    final map = Map<String, dynamic>();
    if (id != null) {
      map['id'] = id;
    }
    if (createdTime != null) {
      map['createdTime'] = forJson
          ? createdTime.toUtc().toString()
          : forQuery ? createdTime.millisecondsSinceEpoch : createdTime;
    }

    if (updatedTime != null) {
      map['updatedTime'] = forJson
          ? updatedTime.toUtc().toString()
          : forQuery ? updatedTime.millisecondsSinceEpoch : updatedTime;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChilds(
      [bool forQuery = false, bool forJson = false]) async {
    final map = Map<String, dynamic>();
    if (id != null) {
      map['id'] = id;
    }
    if (createdTime != null) {
      map['createdTime'] = forJson
          ? createdTime.toUtc().toString()
          : forQuery ? createdTime.millisecondsSinceEpoch : createdTime;
    }

    if (updatedTime != null) {
      map['updatedTime'] = forJson
          ? updatedTime.toUtc().toString()
          : forQuery ? updatedTime.millisecondsSinceEpoch : updatedTime;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method always returns Json String
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method always returns Json String
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChilds(false, true));
  }

  List<dynamic> toArgs() {
    return [
      id,
      createdTime != null ? createdTime.millisecondsSinceEpoch : null,
      updatedTime != null ? updatedTime.millisecondsSinceEpoch : null,
      isDeleted
    ];
  }

  static Future<List<Setting>> fromWebUrl(String url) async {
    try {
      final response = await http.get(url);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Setting.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  static Future<List<Setting>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = List<Setting>();
    try {
      objList = list
          .map((setting) => Setting.fromMap(setting as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR Setting.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Setting>> fromObjectList(Future<List<dynamic>> o) async {
    final data = await o;
    return await Setting.fromMapList(data);
  }

  static Future<List<Setting>> fromMapList(List<dynamic> data) async {
    final List<Setting> objList = List<Setting>();
    for (final Map map in data as List<Map>) {
      final obj = Setting.fromMap(map as Map<String, dynamic>);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Setting by ID if exist, otherwise returns null
  /// <param name='id'>Primary Key Value</param>
  /// <returns>returns Setting if exist, otherwise returns null
  Future<Setting> getById(int id) async {
    if (id == null) {
      return null;
    }
    Setting obj;
    final data = await _mnSetting.getById(id);
    if (data.length != 0) {
      obj = Setting.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0) {
      id = await _mnSetting.insert(this);
    } else {
      id = await _upsert();
    }

    return id;
  }

  /// saveAs Setting. Returns a new Primary Key value of Setting

  /// <returns>Returns a new Primary Key value of Setting
  Future<int> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<Setting> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> saveAll(List<Setting> settings) async {
    final results = _mnSetting.saveAll(
        'INSERT OR REPLACE INTO Settings (id,  createdTime, updatedTime,isDeleted)  VALUES (?,?,?,?)',
        settings);
    return results;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> _upsert() async {
    try {
      id = await _mnSetting.rawInsert(
          'INSERT OR REPLACE INTO Settings (id,  createdTime, updatedTime,isDeleted)  VALUES (?,?,?,?)',
          [
            id,
            createdTime != null ? createdTime.millisecondsSinceEpoch : null,
            updatedTime != null ? updatedTime.millisecondsSinceEpoch : null,
            isDeleted
          ]);
      saveResult = BoolResult(
          success: true, successMessage: 'Setting id=$id updated successfuly');
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Setting Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<Setting>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> upsertAll(List<Setting> settings) async {
    final results = await _mnSetting.rawInsertAll(
        'INSERT OR REPLACE INTO Settings (id,  createdTime, updatedTime,isDeleted)  VALUES (?,?,?,?)',
        settings);
    return results;
  }

  /// Deletes Setting

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Setting invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted) {
      return _mnSetting
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnSetting.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Setting>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover Setting invoked (id=$id)');
    {
      return _mnSetting.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  //private SettingFilterBuilder _Select;
  SettingFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return SettingFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  SettingFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return SettingFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion setting

// region SettingField
class SettingField extends SearchCriteria {
  SettingField(this.settingFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  SettingFilterBuilder settingFB;

  SettingField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  SettingFilterBuilder equals(var pValue) {
    param.expression = '=';
    settingFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, settingFB.parameters, param, SqlSyntax.EQuals,
            settingFB._addedBlocks)
        : setCriteria(pValue, settingFB.parameters, param, SqlSyntax.NotEQuals,
            settingFB._addedBlocks);
    _waitingNot = '';
    settingFB._addedBlocks.needEndBlock[settingFB._blockIndex] =
        settingFB._addedBlocks.retVal;
    return settingFB;
  }

  SettingFilterBuilder equalsOrNull(var pValue) {
    param.expression = '=';
    settingFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, settingFB.parameters, param,
            SqlSyntax.EQualsOrNull, settingFB._addedBlocks)
        : setCriteria(pValue, settingFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, settingFB._addedBlocks);
    _waitingNot = '';
    settingFB._addedBlocks.needEndBlock[settingFB._blockIndex] =
        settingFB._addedBlocks.retVal;
    return settingFB;
  }

  SettingFilterBuilder isNull() {
    settingFB._addedBlocks = setCriteria(
        0,
        settingFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        settingFB._addedBlocks);
    _waitingNot = '';
    settingFB._addedBlocks.needEndBlock[settingFB._blockIndex] =
        settingFB._addedBlocks.retVal;
    return settingFB;
  }

  SettingFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      settingFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          settingFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          settingFB._addedBlocks);
      _waitingNot = '';
      settingFB._addedBlocks.needEndBlock[settingFB._blockIndex] =
          settingFB._addedBlocks.retVal;
    }
    return settingFB;
  }

  SettingFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      settingFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          settingFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          settingFB._addedBlocks);
      _waitingNot = '';
      settingFB._addedBlocks.needEndBlock[settingFB._blockIndex] =
          settingFB._addedBlocks.retVal;
      settingFB._addedBlocks.needEndBlock[settingFB._blockIndex] =
          settingFB._addedBlocks.retVal;
    }
    return settingFB;
  }

  SettingFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      settingFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          settingFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          settingFB._addedBlocks);
      _waitingNot = '';
      settingFB._addedBlocks.needEndBlock[settingFB._blockIndex] =
          settingFB._addedBlocks.retVal;
    }
    return settingFB;
  }

  SettingFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      settingFB._addedBlocks = setCriteria(
          pFirst,
          settingFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          settingFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        settingFB._addedBlocks = setCriteria(pFirst, settingFB.parameters,
            param, SqlSyntax.LessThan, settingFB._addedBlocks);
      } else {
        settingFB._addedBlocks = setCriteria(pFirst, settingFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, settingFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        settingFB._addedBlocks = setCriteria(pLast, settingFB.parameters, param,
            SqlSyntax.GreaterThan, settingFB._addedBlocks);
      } else {
        settingFB._addedBlocks = setCriteria(pLast, settingFB.parameters, param,
            SqlSyntax.LessThanOrEquals, settingFB._addedBlocks);
      }
    }
    _waitingNot = '';
    settingFB._addedBlocks.needEndBlock[settingFB._blockIndex] =
        settingFB._addedBlocks.retVal;
    return settingFB;
  }

  SettingFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    settingFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, settingFB.parameters, param,
            SqlSyntax.GreaterThan, settingFB._addedBlocks)
        : setCriteria(pValue, settingFB.parameters, param,
            SqlSyntax.LessThanOrEquals, settingFB._addedBlocks);
    _waitingNot = '';
    settingFB._addedBlocks.needEndBlock[settingFB._blockIndex] =
        settingFB._addedBlocks.retVal;
    return settingFB;
  }

  SettingFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    settingFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, settingFB.parameters, param, SqlSyntax.LessThan,
            settingFB._addedBlocks)
        : setCriteria(pValue, settingFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, settingFB._addedBlocks);
    _waitingNot = '';
    settingFB._addedBlocks.needEndBlock[settingFB._blockIndex] =
        settingFB._addedBlocks.retVal;
    return settingFB;
  }

  SettingFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    settingFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, settingFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, settingFB._addedBlocks)
        : setCriteria(pValue, settingFB.parameters, param, SqlSyntax.LessThan,
            settingFB._addedBlocks);
    _waitingNot = '';
    settingFB._addedBlocks.needEndBlock[settingFB._blockIndex] =
        settingFB._addedBlocks.retVal;
    return settingFB;
  }

  SettingFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    settingFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, settingFB.parameters, param,
            SqlSyntax.LessThanOrEquals, settingFB._addedBlocks)
        : setCriteria(pValue, settingFB.parameters, param,
            SqlSyntax.GreaterThan, settingFB._addedBlocks);
    _waitingNot = '';
    settingFB._addedBlocks.needEndBlock[settingFB._blockIndex] =
        settingFB._addedBlocks.retVal;
    return settingFB;
  }

  SettingFilterBuilder inValues(var pValue) {
    settingFB._addedBlocks = setCriteria(
        pValue,
        settingFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        settingFB._addedBlocks);
    _waitingNot = '';
    settingFB._addedBlocks.needEndBlock[settingFB._blockIndex] =
        settingFB._addedBlocks.retVal;
    return settingFB;
  }
}
// endregion SettingField

// region SettingFilterBuilder
class SettingFilterBuilder extends SearchCriteria {
  SettingFilterBuilder(Setting obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = List<DbParameter>();
    orderByList = List<String>();
    groupByList = List<String>();
    _addedBlocks = AddedBlocks(List<bool>(), List<bool>());
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Setting _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  SettingFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  SettingFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  SettingFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  SettingFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter();
      _addedBlocks =
          setCriteria(0, parameters, param, '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  SettingFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  /// int count = LIMIT
  SettingFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  SettingFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  SettingFilterBuilder orderBy(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  SettingFilterBuilder orderByDesc(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s desc ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  SettingFilterBuilder groupBy(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') groupByList.add(' $s ');
        }
      }
    }
    return this;
  }

  SettingField setField(SettingField field, String colName, DbType dbtype) {
    return SettingField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  SettingField _id;
  SettingField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  SettingField _createdTime;
  SettingField get createdTime {
    return _createdTime =
        setField(_createdTime, 'createdTime', DbType.datetime);
  }

  SettingField _updatedTime;
  SettingField get updatedTime {
    return _updatedTime =
        setField(_updatedTime, 'updatedTime', DbType.datetime);
  }

  SettingField _isDeleted;
  SettingField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll('[', '')
              .replaceAll(']', '')
              .toString();
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value =
                  param.value == null ? null : param.value == true ? 1 : 0;
              param.value2 =
                  param.value2 == null ? null : param.value2 == true ? 1 : 0;
              break;
            case DbType.date:
            case DbType.datetime:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            whereArguments.add(param.value);
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Setting._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',');
  }

  /// Deletes List<Setting> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();
    if (Setting._softDeleteActivated && !hardDelete) {
      r = await _obj._mnSetting.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnSetting.delete(qparams);
    }
    return r;
  }

  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover Setting bulk invoked');
    return _obj._mnSetting.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from Settings ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnSetting.updateBatch(qparams, values);
  }

  /// This method always returns SettingObj if exist, otherwise returns null
  /// <returns>List<Setting>
  Future<Setting> toSingle([VoidCallback setting(Setting o)]) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnSetting.toList(qparams);
    final data = await objFuture;
    Setting obj;
    if (data.isNotEmpty) {
      obj = Setting.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    if (setting != null) {
      setting(obj);
    }
    return obj;
  }

  /// This method always returns int.
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback settingCount(int c)]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final settingsFuture = await _obj._mnSetting.toList(qparams);
    final int count = settingsFuture[0]['CNT'] as int;
    if (settingCount != null) {
      settingCount(count);
    }
    return count;
  }

  /// This method always returns List<Setting>.
  /// <returns>List<Setting>
  Future<List<Setting>> toList(
      [VoidCallback settingList(List<Setting> o)]) async {
    final data = await toMapList();
    final List<Setting> settingsData = await Setting.fromMapList(data);
    if (settingList != null) settingList(settingsData);
    return settingsData;
  }

  /// This method always returns Json String
  Future<String> toJson() async {
    final list = List<dynamic>();
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method always returns Json String.
  Future<String> toJsonWithChilds() async {
    final list = List<dynamic>();
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChilds(false, true));
    }
    return json.encode(list);
  }

  /// This method always returns List<dynamic>.
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnSetting.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<Setting>>
  Future<List<DropdownMenuItem<Setting>>> toDropDownMenu(
      String displayTextColumn,
      [VoidCallback dropDownMenu(List<DropdownMenuItem<Setting>> o)]) async {
    _buildParameters();
    final settingsFuture = _obj._mnSetting.toList(qparams);

    final data = await settingsFuture;
    final int count = data.length;
    final List<DropdownMenuItem<Setting>> items = List()
      ..add(DropdownMenuItem(
        value: Setting(),
        child: Text('Select Setting'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: Setting.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback dropDownMenu(List<DropdownMenuItem<int>> o)]) async {
    _buildParameters();
    qparams.selectColumns = ['id', displayTextColumn];
    final settingsFuture = _obj._mnSetting.toList(qparams);

    final data = await settingsFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = List()
      ..add(DropdownMenuItem(
        value: 0,
        child: Text('Select Setting'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['id'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) _buildParameters();
    final List<int> idData = List<int>();
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnSetting.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject(
      [VoidCallback listObject(List<dynamic> o)]) async {
    _buildParameters();

    final objectFuture = _obj._mnSetting.toList(qparams);

    final List<dynamic> objectsData = List<dynamic>();
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    if (listObject != null) {
      listObject(objectsData);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Setting.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback listString(List<String> o)]) async {
    _buildParameters();

    final objectFuture = _obj._mnSetting.toList(qparams);

    final List<String> objectsData = List<String>();
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion SettingFilterBuilder

// region SettingFields
class SettingFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fCreatedTime;
  static TableField get createdTime {
    return _fCreatedTime = _fCreatedTime ??
        SqlSyntax.setField(_fCreatedTime, 'createdTime', DbType.datetime);
  }

  static TableField _fUpdatedTime;
  static TableField get updatedTime {
    return _fUpdatedTime = _fUpdatedTime ??
        SqlSyntax.setField(_fUpdatedTime, 'updatedTime', DbType.datetime);
  }

  static TableField _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion SettingFields

//region SettingManager
class SettingManager extends SqfEntityProvider {
  SettingManager() : super(TimeManager(), tableName: _tableName, colId: _colId);
  static String _tableName = 'Settings';
  static String _colId = 'id';
}

//endregion SettingManager
// region StatusType
class StatusType {
  StatusType(
      {this.id,
      this.createdTime,
      this.updatedTime,
      this.name,
      this.description,
      this.isDeleted}) {
    _setDefaultValues();
  }
  StatusType.withFields(this.createdTime, this.updatedTime, this.name,
      this.description, this.isDeleted) {
    _setDefaultValues();
  }
  StatusType.withId(this.id, this.createdTime, this.updatedTime, this.name,
      this.description, this.isDeleted) {
    _setDefaultValues();
  }
  StatusType.fromMap(Map<String, dynamic> o) {
    id = o['id'] as int;
    createdTime = o['createdTime'] != null
        ? int.tryParse(o['createdTime'].toString()) != null
            ? DateTime.fromMillisecondsSinceEpoch(o['createdTime'] as int)
            : DateTime.tryParse(o['createdTime'].toString())
        : null;
    updatedTime = o['updatedTime'] != null
        ? int.tryParse(o['updatedTime'].toString()) != null
            ? DateTime.fromMillisecondsSinceEpoch(o['updatedTime'] as int)
            : DateTime.tryParse(o['updatedTime'].toString())
        : null;
    name = o['name'] as String;
    description = o['description'] as String;
    isDeleted = o['isDeleted'] != null ? o['isDeleted'] == 1 : null;
  }
  // FIELDS (StatusType)
  int id;
  DateTime createdTime;
  DateTime updatedTime;
  String name;
  String description;
  bool isDeleted;

  BoolResult saveResult;
  // end FIELDS (StatusType)

// COLLECTIONS (StatusType)
  /// get Project(s) filtered by StatusTypeId=id
  ProjectFilterBuilder getProjects(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return Project()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .StatusTypeId
        .equals(id)
        .and;
  }
// END COLLECTIONS (StatusType)

  static const bool _softDeleteActivated = true;
  StatusTypeManager __mnStatusType;

  StatusTypeManager get _mnStatusType {
    return __mnStatusType = __mnStatusType ?? StatusTypeManager();
  }

  // METHODS
  Map<String, dynamic> toMap({bool forQuery = false, bool forJson = false}) {
    final map = Map<String, dynamic>();
    if (id != null) {
      map['id'] = id;
    }
    if (createdTime != null) {
      map['createdTime'] = forJson
          ? createdTime.toUtc().toString()
          : forQuery ? createdTime.millisecondsSinceEpoch : createdTime;
    }

    if (updatedTime != null) {
      map['updatedTime'] = forJson
          ? updatedTime.toUtc().toString()
          : forQuery ? updatedTime.millisecondsSinceEpoch : updatedTime;
    }

    if (name != null) {
      map['name'] = name;
    }

    if (description != null) {
      map['description'] = description;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChilds(
      [bool forQuery = false, bool forJson = false]) async {
    final map = Map<String, dynamic>();
    if (id != null) {
      map['id'] = id;
    }
    if (createdTime != null) {
      map['createdTime'] = forJson
          ? createdTime.toUtc().toString()
          : forQuery ? createdTime.millisecondsSinceEpoch : createdTime;
    }

    if (updatedTime != null) {
      map['updatedTime'] = forJson
          ? updatedTime.toUtc().toString()
          : forQuery ? updatedTime.millisecondsSinceEpoch : updatedTime;
    }

    if (name != null) {
      map['name'] = name;
    }

    if (description != null) {
      map['description'] = description;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

// COLLECTIONS (StatusType)
    if (!forQuery) {
      map['Projects'] = await getProjects().toMapList();
    }
// END COLLECTIONS (StatusType)

    return map;
  }

  /// This method always returns Json String
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method always returns Json String
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChilds(false, true));
  }

  List<dynamic> toArgs() {
    return [
      id,
      createdTime != null ? createdTime.millisecondsSinceEpoch : null,
      updatedTime != null ? updatedTime.millisecondsSinceEpoch : null,
      name,
      description,
      isDeleted
    ];
  }

  static Future<List<StatusType>> fromWebUrl(String url) async {
    try {
      final response = await http.get(url);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR StatusType.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  static Future<List<StatusType>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = List<StatusType>();
    try {
      objList = list
          .map((statustype) =>
              StatusType.fromMap(statustype as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR StatusType.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<StatusType>> fromObjectList(
      Future<List<dynamic>> o) async {
    final data = await o;
    return await StatusType.fromMapList(data);
  }

  static Future<List<StatusType>> fromMapList(List<dynamic> data) async {
    final List<StatusType> objList = List<StatusType>();
    for (final Map map in data as List<Map>) {
      final obj = StatusType.fromMap(map as Map<String, dynamic>);

      objList.add(obj);
    }
    return objList;
  }

  /// returns StatusType by ID if exist, otherwise returns null
  /// <param name='id'>Primary Key Value</param>
  /// <returns>returns StatusType if exist, otherwise returns null
  Future<StatusType> getById(int id) async {
    if (id == null) {
      return null;
    }
    StatusType obj;
    final data = await _mnStatusType.getById(id);
    if (data.length != 0) {
      obj = StatusType.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0) {
      id = await _mnStatusType.insert(this);
    } else {
      id = await _upsert();
    }

    return id;
  }

  /// saveAs StatusType. Returns a new Primary Key value of StatusType

  /// <returns>Returns a new Primary Key value of StatusType
  Future<int> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<StatusType> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> saveAll(List<StatusType> statustypes) async {
    final results = _mnStatusType.saveAll(
        'INSERT OR REPLACE INTO StatusType (id,  createdTime, updatedTime, name, description,isDeleted)  VALUES (?,?,?,?,?,?)',
        statustypes);
    return results;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> _upsert() async {
    try {
      id = await _mnStatusType.rawInsert(
          'INSERT OR REPLACE INTO StatusType (id,  createdTime, updatedTime, name, description,isDeleted)  VALUES (?,?,?,?,?,?)',
          [
            id,
            createdTime != null ? createdTime.millisecondsSinceEpoch : null,
            updatedTime != null ? updatedTime.millisecondsSinceEpoch : null,
            name,
            description,
            isDeleted
          ]);
      saveResult = BoolResult(
          success: true,
          successMessage: 'StatusType id=$id updated successfuly');
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'StatusType Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<StatusType>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> upsertAll(List<StatusType> statustypes) async {
    final results = await _mnStatusType.rawInsertAll(
        'INSERT OR REPLACE INTO StatusType (id,  createdTime, updatedTime, name, description,isDeleted)  VALUES (?,?,?,?,?,?)',
        statustypes);
    return results;
  }

  /// Deletes StatusType

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete StatusType invoked (id=$id)');
    var result = BoolResult();
    {
      result = await Project()
          .select()
          .StatusTypeId
          .equals(id)
          .update({"StatusTypeId": null});
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete || isDeleted) {
      return _mnStatusType
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnStatusType.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover StatusType>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover StatusType invoked (id=$id)');
    {
      return _mnStatusType.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  //private StatusTypeFilterBuilder _Select;
  StatusTypeFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return StatusTypeFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  StatusTypeFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return StatusTypeFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion statustype

// region StatusTypeField
class StatusTypeField extends SearchCriteria {
  StatusTypeField(this.statustypeFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  StatusTypeFilterBuilder statustypeFB;

  StatusTypeField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  StatusTypeFilterBuilder equals(var pValue) {
    param.expression = '=';
    statustypeFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, statustypeFB.parameters, param, SqlSyntax.EQuals,
            statustypeFB._addedBlocks)
        : setCriteria(pValue, statustypeFB.parameters, param,
            SqlSyntax.NotEQuals, statustypeFB._addedBlocks);
    _waitingNot = '';
    statustypeFB._addedBlocks.needEndBlock[statustypeFB._blockIndex] =
        statustypeFB._addedBlocks.retVal;
    return statustypeFB;
  }

  StatusTypeFilterBuilder equalsOrNull(var pValue) {
    param.expression = '=';
    statustypeFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, statustypeFB.parameters, param,
            SqlSyntax.EQualsOrNull, statustypeFB._addedBlocks)
        : setCriteria(pValue, statustypeFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, statustypeFB._addedBlocks);
    _waitingNot = '';
    statustypeFB._addedBlocks.needEndBlock[statustypeFB._blockIndex] =
        statustypeFB._addedBlocks.retVal;
    return statustypeFB;
  }

  StatusTypeFilterBuilder isNull() {
    statustypeFB._addedBlocks = setCriteria(
        0,
        statustypeFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        statustypeFB._addedBlocks);
    _waitingNot = '';
    statustypeFB._addedBlocks.needEndBlock[statustypeFB._blockIndex] =
        statustypeFB._addedBlocks.retVal;
    return statustypeFB;
  }

  StatusTypeFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      statustypeFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          statustypeFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          statustypeFB._addedBlocks);
      _waitingNot = '';
      statustypeFB._addedBlocks.needEndBlock[statustypeFB._blockIndex] =
          statustypeFB._addedBlocks.retVal;
    }
    return statustypeFB;
  }

  StatusTypeFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      statustypeFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          statustypeFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          statustypeFB._addedBlocks);
      _waitingNot = '';
      statustypeFB._addedBlocks.needEndBlock[statustypeFB._blockIndex] =
          statustypeFB._addedBlocks.retVal;
      statustypeFB._addedBlocks.needEndBlock[statustypeFB._blockIndex] =
          statustypeFB._addedBlocks.retVal;
    }
    return statustypeFB;
  }

  StatusTypeFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      statustypeFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          statustypeFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          statustypeFB._addedBlocks);
      _waitingNot = '';
      statustypeFB._addedBlocks.needEndBlock[statustypeFB._blockIndex] =
          statustypeFB._addedBlocks.retVal;
    }
    return statustypeFB;
  }

  StatusTypeFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      statustypeFB._addedBlocks = setCriteria(
          pFirst,
          statustypeFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          statustypeFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        statustypeFB._addedBlocks = setCriteria(pFirst, statustypeFB.parameters,
            param, SqlSyntax.LessThan, statustypeFB._addedBlocks);
      } else {
        statustypeFB._addedBlocks = setCriteria(pFirst, statustypeFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, statustypeFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        statustypeFB._addedBlocks = setCriteria(pLast, statustypeFB.parameters,
            param, SqlSyntax.GreaterThan, statustypeFB._addedBlocks);
      } else {
        statustypeFB._addedBlocks = setCriteria(pLast, statustypeFB.parameters,
            param, SqlSyntax.LessThanOrEquals, statustypeFB._addedBlocks);
      }
    }
    _waitingNot = '';
    statustypeFB._addedBlocks.needEndBlock[statustypeFB._blockIndex] =
        statustypeFB._addedBlocks.retVal;
    return statustypeFB;
  }

  StatusTypeFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    statustypeFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, statustypeFB.parameters, param,
            SqlSyntax.GreaterThan, statustypeFB._addedBlocks)
        : setCriteria(pValue, statustypeFB.parameters, param,
            SqlSyntax.LessThanOrEquals, statustypeFB._addedBlocks);
    _waitingNot = '';
    statustypeFB._addedBlocks.needEndBlock[statustypeFB._blockIndex] =
        statustypeFB._addedBlocks.retVal;
    return statustypeFB;
  }

  StatusTypeFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    statustypeFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, statustypeFB.parameters, param,
            SqlSyntax.LessThan, statustypeFB._addedBlocks)
        : setCriteria(pValue, statustypeFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, statustypeFB._addedBlocks);
    _waitingNot = '';
    statustypeFB._addedBlocks.needEndBlock[statustypeFB._blockIndex] =
        statustypeFB._addedBlocks.retVal;
    return statustypeFB;
  }

  StatusTypeFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    statustypeFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, statustypeFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, statustypeFB._addedBlocks)
        : setCriteria(pValue, statustypeFB.parameters, param,
            SqlSyntax.LessThan, statustypeFB._addedBlocks);
    _waitingNot = '';
    statustypeFB._addedBlocks.needEndBlock[statustypeFB._blockIndex] =
        statustypeFB._addedBlocks.retVal;
    return statustypeFB;
  }

  StatusTypeFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    statustypeFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, statustypeFB.parameters, param,
            SqlSyntax.LessThanOrEquals, statustypeFB._addedBlocks)
        : setCriteria(pValue, statustypeFB.parameters, param,
            SqlSyntax.GreaterThan, statustypeFB._addedBlocks);
    _waitingNot = '';
    statustypeFB._addedBlocks.needEndBlock[statustypeFB._blockIndex] =
        statustypeFB._addedBlocks.retVal;
    return statustypeFB;
  }

  StatusTypeFilterBuilder inValues(var pValue) {
    statustypeFB._addedBlocks = setCriteria(
        pValue,
        statustypeFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        statustypeFB._addedBlocks);
    _waitingNot = '';
    statustypeFB._addedBlocks.needEndBlock[statustypeFB._blockIndex] =
        statustypeFB._addedBlocks.retVal;
    return statustypeFB;
  }
}
// endregion StatusTypeField

// region StatusTypeFilterBuilder
class StatusTypeFilterBuilder extends SearchCriteria {
  StatusTypeFilterBuilder(StatusType obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = List<DbParameter>();
    orderByList = List<String>();
    groupByList = List<String>();
    _addedBlocks = AddedBlocks(List<bool>(), List<bool>());
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  StatusType _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  StatusTypeFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  StatusTypeFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  StatusTypeFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  StatusTypeFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter();
      _addedBlocks =
          setCriteria(0, parameters, param, '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  StatusTypeFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  /// int count = LIMIT
  StatusTypeFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  StatusTypeFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  StatusTypeFilterBuilder orderBy(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  StatusTypeFilterBuilder orderByDesc(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s desc ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  StatusTypeFilterBuilder groupBy(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') groupByList.add(' $s ');
        }
      }
    }
    return this;
  }

  StatusTypeField setField(
      StatusTypeField field, String colName, DbType dbtype) {
    return StatusTypeField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  StatusTypeField _id;
  StatusTypeField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  StatusTypeField _createdTime;
  StatusTypeField get createdTime {
    return _createdTime =
        setField(_createdTime, 'createdTime', DbType.datetime);
  }

  StatusTypeField _updatedTime;
  StatusTypeField get updatedTime {
    return _updatedTime =
        setField(_updatedTime, 'updatedTime', DbType.datetime);
  }

  StatusTypeField _name;
  StatusTypeField get name {
    return _name = setField(_name, 'name', DbType.text);
  }

  StatusTypeField _description;
  StatusTypeField get description {
    return _description = setField(_description, 'description', DbType.text);
  }

  StatusTypeField _isDeleted;
  StatusTypeField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll('[', '')
              .replaceAll(']', '')
              .toString();
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value =
                  param.value == null ? null : param.value == true ? 1 : 0;
              param.value2 =
                  param.value2 == null ? null : param.value2 == true ? 1 : 0;
              break;
            case DbType.date:
            case DbType.datetime:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            whereArguments.add(param.value);
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (StatusType._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',');
  }

  /// Deletes List<StatusType> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();
    if (StatusType._softDeleteActivated && !hardDelete) {
      r = await _obj._mnStatusType.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnStatusType.delete(qparams);
    }
    return r;
  }

  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover StatusType bulk invoked');
    return _obj._mnStatusType.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from StatusType ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnStatusType.updateBatch(qparams, values);
  }

  /// This method always returns StatusTypeObj if exist, otherwise returns null
  /// <returns>List<StatusType>
  Future<StatusType> toSingle([VoidCallback statustype(StatusType o)]) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnStatusType.toList(qparams);
    final data = await objFuture;
    StatusType obj;
    if (data.isNotEmpty) {
      obj = StatusType.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    if (statustype != null) {
      statustype(obj);
    }
    return obj;
  }

  /// This method always returns int.
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback statustypeCount(int c)]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final statustypesFuture = await _obj._mnStatusType.toList(qparams);
    final int count = statustypesFuture[0]['CNT'] as int;
    if (statustypeCount != null) {
      statustypeCount(count);
    }
    return count;
  }

  /// This method always returns List<StatusType>.
  /// <returns>List<StatusType>
  Future<List<StatusType>> toList(
      [VoidCallback statustypeList(List<StatusType> o)]) async {
    final data = await toMapList();
    final List<StatusType> statustypesData = await StatusType.fromMapList(data);
    if (statustypeList != null) statustypeList(statustypesData);
    return statustypesData;
  }

  /// This method always returns Json String
  Future<String> toJson() async {
    final list = List<dynamic>();
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method always returns Json String.
  Future<String> toJsonWithChilds() async {
    final list = List<dynamic>();
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChilds(false, true));
    }
    return json.encode(list);
  }

  /// This method always returns List<dynamic>.
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnStatusType.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<StatusType>>
  Future<List<DropdownMenuItem<StatusType>>> toDropDownMenu(
      String displayTextColumn,
      [VoidCallback dropDownMenu(List<DropdownMenuItem<StatusType>> o)]) async {
    _buildParameters();
    final statustypesFuture = _obj._mnStatusType.toList(qparams);

    final data = await statustypesFuture;
    final int count = data.length;
    final List<DropdownMenuItem<StatusType>> items = List()
      ..add(DropdownMenuItem(
        value: StatusType(),
        child: Text('Select StatusType'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: StatusType.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback dropDownMenu(List<DropdownMenuItem<int>> o)]) async {
    _buildParameters();
    qparams.selectColumns = ['id', displayTextColumn];
    final statustypesFuture = _obj._mnStatusType.toList(qparams);

    final data = await statustypesFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = List()
      ..add(DropdownMenuItem(
        value: 0,
        child: Text('Select StatusType'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['id'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) _buildParameters();
    final List<int> idData = List<int>();
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnStatusType.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject(
      [VoidCallback listObject(List<dynamic> o)]) async {
    _buildParameters();

    final objectFuture = _obj._mnStatusType.toList(qparams);

    final List<dynamic> objectsData = List<dynamic>();
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    if (listObject != null) {
      listObject(objectsData);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await StatusType.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback listString(List<String> o)]) async {
    _buildParameters();

    final objectFuture = _obj._mnStatusType.toList(qparams);

    final List<String> objectsData = List<String>();
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion StatusTypeFilterBuilder

// region StatusTypeFields
class StatusTypeFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fCreatedTime;
  static TableField get createdTime {
    return _fCreatedTime = _fCreatedTime ??
        SqlSyntax.setField(_fCreatedTime, 'createdTime', DbType.datetime);
  }

  static TableField _fUpdatedTime;
  static TableField get updatedTime {
    return _fUpdatedTime = _fUpdatedTime ??
        SqlSyntax.setField(_fUpdatedTime, 'updatedTime', DbType.datetime);
  }

  static TableField _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField _fDescription;
  static TableField get description {
    return _fDescription = _fDescription ??
        SqlSyntax.setField(_fDescription, 'description', DbType.text);
  }

  static TableField _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion StatusTypeFields

//region StatusTypeManager
class StatusTypeManager extends SqfEntityProvider {
  StatusTypeManager()
      : super(TimeManager(), tableName: _tableName, colId: _colId);
  static String _tableName = 'StatusType';
  static String _colId = 'id';
}

//endregion StatusTypeManager
class TimeManagerSequenceManager extends SqfEntityProvider {
  TimeManagerSequenceManager() : super(TimeManager());
}
// END OF ENTITIES
